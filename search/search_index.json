{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs \u00b6 For full documentation visit mkdocs.org . Commands \u00b6 mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout \u00b6 mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Welcome to MkDocs"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"setup/","text":"colcon \u00b6 install \u00b6 sudo apt install python3-colcon-common-extensions source /usr/share/gazebo/setup.bash source /opt/ros/foxy/setup.bash source /usr/share/colcon_argcomplete/hook/colcon-argcomplete.bash source /usr/share/colcon_cd/function/colcon_cd.sh export _colcon_cd_root = ~/dev_ws cheat-sheet \u00b6 colcon build colcon build --packages-select <name-of-pkg> colcon build --symlink-install <name-of-pkg> colcon_cd \u00b6","title":"colcon"},{"location":"setup/#colcon","text":"","title":"colcon"},{"location":"setup/#install","text":"sudo apt install python3-colcon-common-extensions source /usr/share/gazebo/setup.bash source /opt/ros/foxy/setup.bash source /usr/share/colcon_argcomplete/hook/colcon-argcomplete.bash source /usr/share/colcon_cd/function/colcon_cd.sh export _colcon_cd_root = ~/dev_ws","title":"install"},{"location":"setup/#cheat-sheet","text":"colcon build colcon build --packages-select <name-of-pkg> colcon build --symlink-install <name-of-pkg>","title":"cheat-sheet"},{"location":"setup/#colcon_cd","text":"","title":"colcon_cd"},{"location":"mkdocs/setup/","text":"plugins \u00b6 tags \u00b6 mkdocs-plugin-tags mkdocs.yaml plugins : - tags add header to md files \u00b6 Add as first line --- title: title tags: - tag1 - tag2 ---","title":"Setup"},{"location":"mkdocs/setup/#plugins","text":"","title":"plugins"},{"location":"mkdocs/setup/#tags","text":"mkdocs-plugin-tags mkdocs.yaml plugins : - tags","title":"tags"},{"location":"mkdocs/setup/#add-header-to-md-files","text":"Add as first line --- title: title tags: - tag1 - tag2 ---","title":"add header to md files"},{"location":"part1/","text":"Reference \u00b6 robot-kinematics","title":"Part1 Hello SKBot"},{"location":"part1/#reference","text":"robot-kinematics","title":"Reference"},{"location":"part1/hello/","text":"Hello SKBot \u00b6 Create project packages create packages mkdir skbot ros2 pkg create --build-type ament_cmake skbot_description ros2 pkg create --build-type ament_cmake skbot_gazebo --dependencies gazebo_ros ros2 pkg create --build-type ament_cmake skbot_control first build \u00b6 cd dev_ws colcon build --symlink-install --package-ignore gazebo_pkg check \u00b6 # check gazebo_ros are installed ros2 launch gazebo_ros gazebo.launch.py First world \u00b6 skbot.world <?xml version =\"1.0\"?> <sdf version= \"1.4\" > <world name= \"skbot_world\" > <include> <uri> model://sun </uri> </include> <include> <uri> model://ground_plane </uri> </include> </world> </sdf> First launch file \u00b6 import os from ament_index_python import get_package_share_directory from launch import LaunchDescription from launch.actions import IncludeLaunchDescription from launch.actions import DeclareLaunchArgument from launch.launch_description_sources import PythonLaunchDescriptionSource def generate_launch_description (): pkg_gazebo_ros = get_package_share_directory ( \"gazebo_ros\" ) pkg_skbot_gazebo = get_package_share_directory ( \"skbot_gazebo\" ) gazebo = IncludeLaunchDescription ( PythonLaunchDescriptionSource ( os . path . join ( pkg_gazebo_ros , \"launch\" , \"gazebo.launch.py\" )) ) world_arg = DeclareLaunchArgument ( \"world\" , default_value = [ os . path . join ( pkg_skbot_gazebo , \"worlds\" , \"skbot.world\" ), \"\" ], description = \"hello skbot world\" ) verbose_arg = DeclareLaunchArgument ( \"verbose\" , default_value = [ \"true\" ], description = \"verbose log\" ) return LaunchDescription ( [ world_arg , verbose_arg , gazebo ] ) get_package_share_directory Return the share directory of the given package (install/share/foo/) IncludeLaunchDescription DeclareLaunchArgument PythonLaunchDescriptionSource CMakeLists \u00b6 copy launch and world files to install folder install ( DIRECTORY launch DESTINATION share/ ${ PROJECT_NAME } ) install ( DIRECTORY worlds DESTINATION share/ ${ PROJECT_NAME } ) Build and Run \u00b6 colcon build --symlink-install --packages-select skbot_gazebo ros2 launch skbot_gazebo gz.launch.py colcon tips \u00b6 colcon_cd \u00b6 cd to package colcon_cd gazebo_ros Note Find only packages under current root Note If command not found Source / add to .bashrc `source /usr/share/colcon_cd/function/colcon_cd.sh`","title":"Hello SKBot"},{"location":"part1/hello/#hello-skbot","text":"Create project packages create packages mkdir skbot ros2 pkg create --build-type ament_cmake skbot_description ros2 pkg create --build-type ament_cmake skbot_gazebo --dependencies gazebo_ros ros2 pkg create --build-type ament_cmake skbot_control","title":"Hello SKBot"},{"location":"part1/hello/#first-build","text":"cd dev_ws colcon build --symlink-install --package-ignore gazebo_pkg","title":"first build"},{"location":"part1/hello/#check","text":"# check gazebo_ros are installed ros2 launch gazebo_ros gazebo.launch.py","title":"check"},{"location":"part1/hello/#first-world","text":"skbot.world <?xml version =\"1.0\"?> <sdf version= \"1.4\" > <world name= \"skbot_world\" > <include> <uri> model://sun </uri> </include> <include> <uri> model://ground_plane </uri> </include> </world> </sdf>","title":"First world"},{"location":"part1/hello/#first-launch-file","text":"import os from ament_index_python import get_package_share_directory from launch import LaunchDescription from launch.actions import IncludeLaunchDescription from launch.actions import DeclareLaunchArgument from launch.launch_description_sources import PythonLaunchDescriptionSource def generate_launch_description (): pkg_gazebo_ros = get_package_share_directory ( \"gazebo_ros\" ) pkg_skbot_gazebo = get_package_share_directory ( \"skbot_gazebo\" ) gazebo = IncludeLaunchDescription ( PythonLaunchDescriptionSource ( os . path . join ( pkg_gazebo_ros , \"launch\" , \"gazebo.launch.py\" )) ) world_arg = DeclareLaunchArgument ( \"world\" , default_value = [ os . path . join ( pkg_skbot_gazebo , \"worlds\" , \"skbot.world\" ), \"\" ], description = \"hello skbot world\" ) verbose_arg = DeclareLaunchArgument ( \"verbose\" , default_value = [ \"true\" ], description = \"verbose log\" ) return LaunchDescription ( [ world_arg , verbose_arg , gazebo ] ) get_package_share_directory Return the share directory of the given package (install/share/foo/) IncludeLaunchDescription DeclareLaunchArgument PythonLaunchDescriptionSource","title":"First launch file"},{"location":"part1/hello/#cmakelists","text":"copy launch and world files to install folder install ( DIRECTORY launch DESTINATION share/ ${ PROJECT_NAME } ) install ( DIRECTORY worlds DESTINATION share/ ${ PROJECT_NAME } )","title":"CMakeLists"},{"location":"part1/hello/#build-and-run","text":"colcon build --symlink-install --packages-select skbot_gazebo ros2 launch skbot_gazebo gz.launch.py","title":"Build and Run"},{"location":"part1/hello/#colcon-tips","text":"","title":"colcon tips"},{"location":"part1/hello/#colcon_cd","text":"cd to package colcon_cd gazebo_ros Note Find only packages under current root Note If command not found Source / add to .bashrc `source /usr/share/colcon_cd/function/colcon_cd.sh`","title":"colcon_cd"},{"location":"part1/xacro/","text":"XACRO \u00b6 install \u00b6 sudo apt install ros-foxy-xacro usage \u00b6 ros2 run xacro xacro <path to xacro file> launch \u00b6 using gazebo_ros spawn_entity.py xacro launch import os from ament_index_python import get_package_share_directory from launch import LaunchDescription from launch.actions import IncludeLaunchDescription from launch.actions import DeclareLaunchArgument from launch.launch_description_sources import PythonLaunchDescriptionSource from launch_ros.actions import Node import xacro def generate_launch_description (): pkg_gazebo_ros = get_package_share_directory ( \"gazebo_ros\" ) pkg_skbot_gazebo = get_package_share_directory ( \"skbot_gazebo\" ) gazebo = IncludeLaunchDescription ( PythonLaunchDescriptionSource ( os . path . join ( pkg_gazebo_ros , \"launch\" , \"gazebo.launch.py\" )) ) world_arg = DeclareLaunchArgument ( \"world\" , default_value = [ os . path . join ( pkg_skbot_gazebo , \"worlds\" , \"skbot.world\" ), \"\" ], description = \"hello skbot world\" ) verbose_arg = DeclareLaunchArgument ( \"verbose\" , default_value = [ \"true\" ], description = \"verbose log\" ) skbot_description = get_package_share_directory ( \"skbot_description\" ) robot_description_path = os . path . join ( skbot_description , \"urdf\" , \"skbot.xacro\" , ) urdf_path = os . path . join ( skbot_description , \"urdf\" , \"skbot.urdf\" , ) doc = xacro . process_file ( robot_description_path ) . toxml () out = xacro . open_output ( urdf_path ) out . write ( doc ) spawn_entity = Node ( package = 'gazebo_ros' , node_executable = 'spawn_entity.py' , arguments = [ '-entity' , 'demo' , '-file' , urdf_path ], output = 'screen' ) return LaunchDescription ( [ world_arg , verbose_arg , gazebo , spawn_entity ] ) using robot state publisher enter content","title":"XACRO"},{"location":"part1/xacro/#xacro","text":"","title":"XACRO"},{"location":"part1/xacro/#install","text":"sudo apt install ros-foxy-xacro","title":"install"},{"location":"part1/xacro/#usage","text":"ros2 run xacro xacro <path to xacro file>","title":"usage"},{"location":"part1/xacro/#launch","text":"using gazebo_ros spawn_entity.py xacro launch import os from ament_index_python import get_package_share_directory from launch import LaunchDescription from launch.actions import IncludeLaunchDescription from launch.actions import DeclareLaunchArgument from launch.launch_description_sources import PythonLaunchDescriptionSource from launch_ros.actions import Node import xacro def generate_launch_description (): pkg_gazebo_ros = get_package_share_directory ( \"gazebo_ros\" ) pkg_skbot_gazebo = get_package_share_directory ( \"skbot_gazebo\" ) gazebo = IncludeLaunchDescription ( PythonLaunchDescriptionSource ( os . path . join ( pkg_gazebo_ros , \"launch\" , \"gazebo.launch.py\" )) ) world_arg = DeclareLaunchArgument ( \"world\" , default_value = [ os . path . join ( pkg_skbot_gazebo , \"worlds\" , \"skbot.world\" ), \"\" ], description = \"hello skbot world\" ) verbose_arg = DeclareLaunchArgument ( \"verbose\" , default_value = [ \"true\" ], description = \"verbose log\" ) skbot_description = get_package_share_directory ( \"skbot_description\" ) robot_description_path = os . path . join ( skbot_description , \"urdf\" , \"skbot.xacro\" , ) urdf_path = os . path . join ( skbot_description , \"urdf\" , \"skbot.urdf\" , ) doc = xacro . process_file ( robot_description_path ) . toxml () out = xacro . open_output ( urdf_path ) out . write ( doc ) spawn_entity = Node ( package = 'gazebo_ros' , node_executable = 'spawn_entity.py' , arguments = [ '-entity' , 'demo' , '-file' , urdf_path ], output = 'screen' ) return LaunchDescription ( [ world_arg , verbose_arg , gazebo , spawn_entity ] ) using robot state publisher enter content","title":"launch"},{"location":"part2/control/","text":"install \u00b6 sudo apt install ros-foxy-ros2-control sudo apt install ros-foxy-gazebo-ros2-control ros2 control load_controller --set-state start joint_state_broadcaster ros2 control load_controller --set-state start effort_controllers # ros2 control list_controllers # Result joint_state_broadcaster [ joint_state_broadcaster/JointStateBroadcaster ] active effort_controllers [ effort_controllers/JointGroupEffortController ] active ros2 interface show std_msgs/msg/Float64MultiArray ros2 topic pub -1 /effort_controllers/commands std_msgs/msg/Float64MultiArray \"data: - 0.5 - 0.5\" launch \u00b6 import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch.actions import ExecuteProcess , IncludeLaunchDescription , RegisterEventHandler from launch.event_handlers import OnProcessExit from launch.launch_description_sources import PythonLaunchDescriptionSource from launch_ros.actions import Node import xacro def generate_launch_description (): gazebo = IncludeLaunchDescription ( PythonLaunchDescriptionSource ([ os . path . join ( get_package_share_directory ( 'gazebo_ros' ), 'launch' ), '/gazebo.launch.py' ]), ) skbot_description = get_package_share_directory ( 'skbot_description' ) # skbot_control = get_package_share_directory('skbot_control') xacro_file = os . path . join ( skbot_description , 'urdf' , 'skbot.xacro' ) doc = xacro . parse ( open ( xacro_file )) xacro . process_doc ( doc ) params = { 'robot_description' : doc . toxml ()} node_robot_state_publisher = Node ( package = 'robot_state_publisher' , executable = 'robot_state_publisher' , output = 'screen' , parameters = [ params ] ) spawn_entity = Node ( package = 'gazebo_ros' , executable = 'spawn_entity.py' , arguments = [ '-topic' , 'robot_description' , '-entity' , 'skbot' ], output = 'screen' ) load_joint_state_controller = ExecuteProcess ( cmd = [ 'ros2' , 'control' , 'load_controller' , '--set-state' , 'start' , 'joint_state_broadcaster' ], output = 'screen' ) load_joint_effort_controller = ExecuteProcess ( cmd = [ 'ros2' , 'control' , 'load_controller' , '--set-state' , 'start' , 'effort_controllers' ], output = 'screen' ) spawn_entity_event = RegisterEventHandler ( event_handler = OnProcessExit ( target_action = spawn_entity , on_exit = [ load_joint_state_controller ], ) ) load_joint_state_controller_event = RegisterEventHandler ( event_handler = OnProcessExit ( target_action = load_joint_state_controller , on_exit = [ load_joint_effort_controller ], ) ) ld = LaunchDescription () ld . add_action ( spawn_entity_event ) ld . add_action ( load_joint_state_controller_event ) ld . add_action ( gazebo ) ld . add_action ( node_robot_state_publisher ) ld . add_action ( spawn_entity ) return ld","title":"install"},{"location":"part2/control/#install","text":"sudo apt install ros-foxy-ros2-control sudo apt install ros-foxy-gazebo-ros2-control ros2 control load_controller --set-state start joint_state_broadcaster ros2 control load_controller --set-state start effort_controllers # ros2 control list_controllers # Result joint_state_broadcaster [ joint_state_broadcaster/JointStateBroadcaster ] active effort_controllers [ effort_controllers/JointGroupEffortController ] active ros2 interface show std_msgs/msg/Float64MultiArray ros2 topic pub -1 /effort_controllers/commands std_msgs/msg/Float64MultiArray \"data: - 0.5 - 0.5\"","title":"install"},{"location":"part2/control/#launch","text":"import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch.actions import ExecuteProcess , IncludeLaunchDescription , RegisterEventHandler from launch.event_handlers import OnProcessExit from launch.launch_description_sources import PythonLaunchDescriptionSource from launch_ros.actions import Node import xacro def generate_launch_description (): gazebo = IncludeLaunchDescription ( PythonLaunchDescriptionSource ([ os . path . join ( get_package_share_directory ( 'gazebo_ros' ), 'launch' ), '/gazebo.launch.py' ]), ) skbot_description = get_package_share_directory ( 'skbot_description' ) # skbot_control = get_package_share_directory('skbot_control') xacro_file = os . path . join ( skbot_description , 'urdf' , 'skbot.xacro' ) doc = xacro . parse ( open ( xacro_file )) xacro . process_doc ( doc ) params = { 'robot_description' : doc . toxml ()} node_robot_state_publisher = Node ( package = 'robot_state_publisher' , executable = 'robot_state_publisher' , output = 'screen' , parameters = [ params ] ) spawn_entity = Node ( package = 'gazebo_ros' , executable = 'spawn_entity.py' , arguments = [ '-topic' , 'robot_description' , '-entity' , 'skbot' ], output = 'screen' ) load_joint_state_controller = ExecuteProcess ( cmd = [ 'ros2' , 'control' , 'load_controller' , '--set-state' , 'start' , 'joint_state_broadcaster' ], output = 'screen' ) load_joint_effort_controller = ExecuteProcess ( cmd = [ 'ros2' , 'control' , 'load_controller' , '--set-state' , 'start' , 'effort_controllers' ], output = 'screen' ) spawn_entity_event = RegisterEventHandler ( event_handler = OnProcessExit ( target_action = spawn_entity , on_exit = [ load_joint_state_controller ], ) ) load_joint_state_controller_event = RegisterEventHandler ( event_handler = OnProcessExit ( target_action = load_joint_state_controller , on_exit = [ load_joint_effort_controller ], ) ) ld = LaunchDescription () ld . add_action ( spawn_entity_event ) ld . add_action ( load_joint_state_controller_event ) ld . add_action ( gazebo ) ld . add_action ( node_robot_state_publisher ) ld . add_action ( spawn_entity ) return ld","title":"launch"},{"location":"part2/diff/","text":"Diff Drive \u00b6 urdf launch rviz gazebo teleop Pub Twist message URDF \u00b6 Add gazebo_ros_joint_state_publisher plugin Add gazebo_ros_diff_drive plugin skbot.gazebo 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 <gazebo> <plugin name= \"joint_states\" filename= \"libgazebo_ros_joint_state_publisher.so\" > <joint_name> right_wheel_hinge </joint_name> <joint_name> left_wheel_hinge </joint_name> </plugin> </gazebo> <gazebo> <plugin filename= \"libgazebo_ros_diff_drive.so\" name= \"differential_drive_controller\" > <ros> <namespace> /skbot </namespace> </ros> <!-- wheels --> <left_joint> left_wheel_hinge </left_joint> <right_joint> right_wheel_hinge </right_joint> <!-- kinematics --> <wheel_separation> ${chassisWidth+wheelWidth} </wheel_separation> <wheel_diameter> ${2*wheelRadius} </wheel_diameter> <!-- limits --> <max_wheel_torque> 10 </max_wheel_torque> <max_wheel_acceleration> 1.0 </max_wheel_acceleration> <!-- output --> <publish_odom> true </publish_odom> <publish_odom_tf> true </publish_odom_tf> <odometry_frame> odom </odometry_frame> <robot_base_frame> chassis </robot_base_frame> </plugin> </gazebo> ros section inside plugin tag <ros> <!-- Set namespace --> <namespace> /demo </namespace> <!-- Remap default topics --> <argument> cmd_vel:=cmd_demo </argument> <argument> odom:=odom_demo </argument> </ros> joint_publisher remove joint_publisher from launch file Launch \u00b6 gz_rviz.launch.py import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch.actions import ExecuteProcess from launch_ros.actions import Node import xacro def generate_launch_description (): skbot_description = get_package_share_directory ( \"skbot_description\" ) robot_description_path = os . path . join ( skbot_description , \"urdf\" , \"skbot.xacro\" , ) urdf_path = os . path . join ( skbot_description , \"urdf\" , \"skbot.urdf\" ) doc = xacro . process_file ( robot_description_path ) . toxml () out = xacro . open_output ( urdf_path ) out . write ( doc ) return LaunchDescription ([ Node ( package = 'robot_state_publisher' , executable = 'robot_state_publisher' , name = 'robot_state_publisher' , output = 'screen' , arguments = [ urdf_path ]), Node ( package = 'rviz2' , namespace = '' , executable = 'rviz2' , name = 'rviz2' , arguments = [ '-d' , [ os . path . join ( skbot_description , 'config' , 'map.rviz' )]]), ExecuteProcess ( cmd = [ 'gazebo' , '--verbose' , '-s' , 'libgazebo_ros_factory.so' ], output = 'screen' ), Node ( package = 'gazebo_ros' , executable = 'spawn_entity.py' , name = 'urdf_spawner' , output = 'screen' , arguments = [ \"-topic\" , \"/robot_description\" , \"-entity\" , \"skbot\" ]) ]) Rviz \u00b6 Running rviz using map.rviz config Set Fixed Frame to odom Teleop \u00b6 install sudo apt install ros-foxy-teleop-twist-keyboard run and mapping ros2 run teleop_twist_keyboard teleop_twist_keyboard --ros-args --remap cmd_vel:=/skbot/cmd_vel Terminator sudo apt install terminator Ctrl+Shift+E vertical split Ctrl+Shift+O horizontal split Alt+ArrowKeys Navigate terminals Pub Twist message \u00b6 ros2 topic pub -1 /skbot/cmd_vel geometry_msgs/msg/Twist \"linear: x: 0.0 y: 0.0 z: 0.0 angular: x: 0.0 y: 0.0 z: 1.0\"","title":"diff drive plugin"},{"location":"part2/diff/#diff-drive","text":"urdf launch rviz gazebo teleop Pub Twist message","title":"Diff Drive"},{"location":"part2/diff/#urdf","text":"Add gazebo_ros_joint_state_publisher plugin Add gazebo_ros_diff_drive plugin skbot.gazebo 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 <gazebo> <plugin name= \"joint_states\" filename= \"libgazebo_ros_joint_state_publisher.so\" > <joint_name> right_wheel_hinge </joint_name> <joint_name> left_wheel_hinge </joint_name> </plugin> </gazebo> <gazebo> <plugin filename= \"libgazebo_ros_diff_drive.so\" name= \"differential_drive_controller\" > <ros> <namespace> /skbot </namespace> </ros> <!-- wheels --> <left_joint> left_wheel_hinge </left_joint> <right_joint> right_wheel_hinge </right_joint> <!-- kinematics --> <wheel_separation> ${chassisWidth+wheelWidth} </wheel_separation> <wheel_diameter> ${2*wheelRadius} </wheel_diameter> <!-- limits --> <max_wheel_torque> 10 </max_wheel_torque> <max_wheel_acceleration> 1.0 </max_wheel_acceleration> <!-- output --> <publish_odom> true </publish_odom> <publish_odom_tf> true </publish_odom_tf> <odometry_frame> odom </odometry_frame> <robot_base_frame> chassis </robot_base_frame> </plugin> </gazebo> ros section inside plugin tag <ros> <!-- Set namespace --> <namespace> /demo </namespace> <!-- Remap default topics --> <argument> cmd_vel:=cmd_demo </argument> <argument> odom:=odom_demo </argument> </ros> joint_publisher remove joint_publisher from launch file","title":"URDF"},{"location":"part2/diff/#launch","text":"gz_rviz.launch.py import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch.actions import ExecuteProcess from launch_ros.actions import Node import xacro def generate_launch_description (): skbot_description = get_package_share_directory ( \"skbot_description\" ) robot_description_path = os . path . join ( skbot_description , \"urdf\" , \"skbot.xacro\" , ) urdf_path = os . path . join ( skbot_description , \"urdf\" , \"skbot.urdf\" ) doc = xacro . process_file ( robot_description_path ) . toxml () out = xacro . open_output ( urdf_path ) out . write ( doc ) return LaunchDescription ([ Node ( package = 'robot_state_publisher' , executable = 'robot_state_publisher' , name = 'robot_state_publisher' , output = 'screen' , arguments = [ urdf_path ]), Node ( package = 'rviz2' , namespace = '' , executable = 'rviz2' , name = 'rviz2' , arguments = [ '-d' , [ os . path . join ( skbot_description , 'config' , 'map.rviz' )]]), ExecuteProcess ( cmd = [ 'gazebo' , '--verbose' , '-s' , 'libgazebo_ros_factory.so' ], output = 'screen' ), Node ( package = 'gazebo_ros' , executable = 'spawn_entity.py' , name = 'urdf_spawner' , output = 'screen' , arguments = [ \"-topic\" , \"/robot_description\" , \"-entity\" , \"skbot\" ]) ])","title":"Launch"},{"location":"part2/diff/#rviz","text":"Running rviz using map.rviz config Set Fixed Frame to odom","title":"Rviz"},{"location":"part2/diff/#teleop","text":"install sudo apt install ros-foxy-teleop-twist-keyboard run and mapping ros2 run teleop_twist_keyboard teleop_twist_keyboard --ros-args --remap cmd_vel:=/skbot/cmd_vel Terminator sudo apt install terminator Ctrl+Shift+E vertical split Ctrl+Shift+O horizontal split Alt+ArrowKeys Navigate terminals","title":"Teleop"},{"location":"part2/diff/#pub-twist-message","text":"ros2 topic pub -1 /skbot/cmd_vel geometry_msgs/msg/Twist \"linear: x: 0.0 y: 0.0 z: 0.0 angular: x: 0.0 y: 0.0 z: 1.0\"","title":"Pub Twist message"},{"location":"part2/joy/","text":"joy \u00b6 Joy Teleop \u00b6 PS4 joystick (bluetooth) pairing \u00b6 install \u00b6 sudo apt install ros-foxy-joy todo: \u00b6 write node convert from joy msg to twist msg ROS2 USE Joy_node and teleop_twist_joy_node to grab data for moving a robot ros2 topic echo /joy # header: stamp: sec: 1644248103 nanosec: 691350760 frame_id: joy axes: - -0.0 - -0.0 - 1 .0 - -0.0 - -0.0 - 1 .0 - 0 .0 - 0 .0 buttons: - 0 - 0 - 0 - 0 - 0 - 0 - 0 - 0 - 0 - 0 - 0 - 0 - 0","title":"joy"},{"location":"part2/joy/#joy","text":"","title":"joy"},{"location":"part2/joy/#joy-teleop","text":"PS4 joystick (bluetooth)","title":"Joy Teleop"},{"location":"part2/joy/#pairing","text":"","title":"pairing"},{"location":"part2/joy/#install","text":"sudo apt install ros-foxy-joy","title":"install"},{"location":"part2/joy/#todo","text":"write node convert from joy msg to twist msg ROS2 USE Joy_node and teleop_twist_joy_node to grab data for moving a robot ros2 topic echo /joy # header: stamp: sec: 1644248103 nanosec: 691350760 frame_id: joy axes: - -0.0 - -0.0 - 1 .0 - -0.0 - -0.0 - 1 .0 - 0 .0 - 0 .0 buttons: - 0 - 0 - 0 - 0 - 0 - 0 - 0 - 0 - 0 - 0 - 0 - 0 - 0","title":"todo:"},{"location":"part2/rviz/","text":"sudo apt install ros-foxy-rviz2 config \u00b6 Run RVIZ config from command line rviz2 -d $(colcon_cd your_package && pwd)/path/to/config.rviz Launch \u00b6 Warning Don't forget copy config folder to install folder using CMakelists install(DIRECTORY config DESTINATION share/${PROJECT_NAME}) import os from ament_index_python import get_package_share_directory from launch import LaunchDescription from launch_ros.actions import Node import os def generate_launch_description (): pkg_name = 'skbot_description' skbot_description_path = get_package_share_directory ( pkg_name ) rviz_node = Node ( package = 'rviz2' , namespace = '' , executable = 'rviz2' , name = 'rviz2' , arguments = [ '-d' , [ os . path . join ( skbot_description_path , 'config' , 'rviz.rviz' )]] ) ld = LaunchDescription () ld . add_action ( rviz_node ) return ld","title":"Rviz"},{"location":"part2/rviz/#config","text":"Run RVIZ config from command line rviz2 -d $(colcon_cd your_package && pwd)/path/to/config.rviz","title":"config"},{"location":"part2/rviz/#launch","text":"Warning Don't forget copy config folder to install folder using CMakelists install(DIRECTORY config DESTINATION share/${PROJECT_NAME}) import os from ament_index_python import get_package_share_directory from launch import LaunchDescription from launch_ros.actions import Node import os def generate_launch_description (): pkg_name = 'skbot_description' skbot_description_path = get_package_share_directory ( pkg_name ) rviz_node = Node ( package = 'rviz2' , namespace = '' , executable = 'rviz2' , name = 'rviz2' , arguments = [ '-d' , [ os . path . join ( skbot_description_path , 'config' , 'rviz.rviz' )]] ) ld = LaunchDescription () ld . add_action ( rviz_node ) return ld","title":"Launch"},{"location":"part2/tf/","text":"TF \u00b6 robot_state_publisher \u00b6 uses the URDF specified by the parameter robot_description and the joint positions from the topic joint_states to calculate the forward kinematics of the robot and publish the results via tf . ros2 run robot_state_publisher robot_state_publisher --ros-args -p robot_description:=\"$(xacro src/skbot/skbot_description/urdf/skbot.xacro)\" joint_state_publisher \u00b6 This package publishes sensor_msgs/JointState messages for a robot. The package reads the robot_description parameter, finds all of the non-fixed joints and publishes a JointState message with all those joints defined. launch urdf with robot_description \u00b6 robot_state_publisher 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 #!/usr/bin/env python3 import os from ament_index_python import get_package_share_directory from launch import LaunchDescription from launch_ros.actions import Node import xacro def generate_launch_description (): pkg_skbot_description = get_package_share_directory ( \"skbot_description\" ) robot_description_path = os . path . join ( pkg_skbot_description , \"urdf\" , \"skbot.xacro\" , ) doc = xacro . parse ( open ( robot_description_path )) xacro . process_doc ( doc ) params = { 'robot_description' : doc . toxml ()} node_robot_state_publisher = Node ( package = 'robot_state_publisher' , executable = 'robot_state_publisher' , output = 'screen' , parameters = [ params ] ) node_joint_state_publisher = Node ( package = 'joint_state_publisher' , executable = 'joint_state_publisher' , name = 'joint_state_publisher' , output = 'screen' , parameters = [ params ]) ld = LaunchDescription () ld . add_action ( node_robot_state_publisher ) ld . add_action ( node_joint_state_publisher ) return ld \u00b6 TF Tree \u00b6 using rqt sudo apt install ros-foxy-rqt-tf-tree usage \u00b6 ros2 run rqt_gui rqt_gui # # select Plugins -> Visualization -> TF Tree References \u00b6 Getting Ready for ROS Part 6: The Transform System (TF)","title":"TF"},{"location":"part2/tf/#tf","text":"","title":"TF"},{"location":"part2/tf/#robot_state_publisher","text":"uses the URDF specified by the parameter robot_description and the joint positions from the topic joint_states to calculate the forward kinematics of the robot and publish the results via tf . ros2 run robot_state_publisher robot_state_publisher --ros-args -p robot_description:=\"$(xacro src/skbot/skbot_description/urdf/skbot.xacro)\"","title":"robot_state_publisher"},{"location":"part2/tf/#joint_state_publisher","text":"This package publishes sensor_msgs/JointState messages for a robot. The package reads the robot_description parameter, finds all of the non-fixed joints and publishes a JointState message with all those joints defined.","title":"joint_state_publisher"},{"location":"part2/tf/#launch-urdf-with-robot_description","text":"","title":"launch urdf with robot_description"},{"location":"part2/tf/#robot_state_publisher-1-2-3-4-5-6-7-8-9-10-11-12-13-14-15-16-17-18-19-20-21-22-23-24-25-26-27-28-29-30-31-32-33-34-35-36-37-38-39usrbinenv-python3-import-os-from-ament_index_python-import-get_package_share_directory-from-launch-import-launchdescription-from-launch_rosactions-import-node-import-xacro-def-generate_launch_description-pkg_skbot_description-get_package_share_directoryskbot_description-robot_description_path-ospathjoin-pkg_skbot_description-urdf-skbotxacro-doc-xacroparseopenrobot_description_path-xacroprocess_docdoc-params-robot_description-doctoxml-node_robot_state_publisher-node-packagerobot_state_publisher-executablerobot_state_publisher-outputscreen-parametersparams-node_joint_state_publisher-node-packagejoint_state_publisher-executablejoint_state_publisher-namejoint_state_publisher-outputscreen-parametersparams-ld-launchdescription-ldadd_actionnode_robot_state_publisher-ldadd_actionnode_joint_state_publisher-return-ld","text":"","title":"robot_state_publisher 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39#!/usr/bin/env python3\nimport os\nfrom ament_index_python import get_package_share_directory\nfrom launch import LaunchDescription\nfrom launch_ros.actions import Node\nimport xacro\n\ndef generate_launch_description():\n\n    pkg_skbot_description = get_package_share_directory(&quot;skbot_description&quot;)\n    robot_description_path =  os.path.join(\n        pkg_skbot_description,\n        &quot;urdf&quot;,\n        &quot;skbot.xacro&quot;,\n    )\n\n    doc = xacro.parse(open(robot_description_path))\n    xacro.process_doc(doc)\n\n    params = {&#39;robot_description&#39;: doc.toxml()}\n\n    node_robot_state_publisher = Node(\n        package=&#39;robot_state_publisher&#39;,\n        executable=&#39;robot_state_publisher&#39;,\n        output=&#39;screen&#39;,\n        parameters=[params]\n    )\n\n    node_joint_state_publisher = Node(\n        package=&#39;joint_state_publisher&#39;,\n        executable=&#39;joint_state_publisher&#39;,\n        name=&#39;joint_state_publisher&#39;,\n        output=&#39;screen&#39;,\n        parameters=[params])\n\n    ld = LaunchDescription()\n    ld.add_action(node_robot_state_publisher)\n    ld.add_action(node_joint_state_publisher)\n    return ld\n\n"},{"location":"part2/tf/#tf-tree","text":"using rqt sudo apt install ros-foxy-rqt-tf-tree","title":"TF Tree"},{"location":"part2/tf/#usage","text":"ros2 run rqt_gui rqt_gui # # select Plugins -> Visualization -> TF Tree","title":"usage"},{"location":"part2/tf/#references","text":"Getting Ready for ROS Part 6: The Transform System (TF)","title":"References"},{"location":"part3/camera/","text":"urdf_camera sensor 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 <gazebo reference= \"camera\" > <material> Gazebo/Blue </material> > <sensor type= \"camera\" name= \"sensor_name\" > <!-- Set always_on only sensor, not on plugin --> <always_on> 1 </always_on> <visualize> 1 </visualize> <!-- Set update_rate only sensor, not on plugin --> <update_rate> 10 </update_rate> <horizontal_fov> 1.3962634 </horizontal_fov> <image> <width> 320 </width> <height> 240 </height> <format> R8G8B8 </format> </image> <clip> <near> 0.02 </near> <far> 300 </far> </clip> <camera name= \"camera_name\" > <distortion> <k1> 0.0 </k1> <k2> 0.0 </k2> <k3> 0.0 </k3> <p1> 0.0 </p1> <p2> 0.0 </p2> <!-- <center>0.5 0.5</center> --> </distortion> </camera> <!-- Use camera, not camera_triggered --> <plugin name= \"plugin_name\" filename= \"libgazebo_ros_camera.so\" > <!-- <ros> <namespace>custom_ns</namespace> <argument>image_raw:=custom_img</argument> <argument>camera_info:=custom_info</argument> </ros> --> <!-- Set camera name. If empty, defaults to sensor name (i.e. \"sensor_name\") --> <!-- <camera_name>custom_camera</camera_name> --> <!-- Set TF frame name. If empty, defaults to link name (i.e. \"link_name\") --> <!-- <frame_name>custom_frame</frame_name> --> <hack_baseline> 0.07 </hack_baseline> </plugin> </sensor> </gazebo> image_view \u00b6 install sudo apt install ros-fox-image-view usage \u00b6 ros2 topic list ... /skbot_camera/camera_info /skbot_camera/image_raw /skbot/cmd_vel /skbot/odom /tf # ros2 run image_view image_view image: = /skbot_camera/image_raw","title":"Camera"},{"location":"part3/camera/#image_view","text":"install sudo apt install ros-fox-image-view","title":"image_view"},{"location":"part3/camera/#usage","text":"ros2 topic list ... /skbot_camera/camera_info /skbot_camera/image_raw /skbot/cmd_vel /skbot/odom /tf # ros2 run image_view image_view image: = /skbot_camera/image_raw","title":"usage"},{"location":"part3/laser/","text":"urdf \u00b6 urdf with mesh \u00b6 mesh file location skbot_description/meshes folder Add this folder to gazebo env. variable GAZEBO_RESOURCE_PATH (launch file) load resource file model <!-- file --> <visual name= 'base_link_visual' > <pose> 0 0 0 0 0 0 </pose> <geometry> <mesh> <scale> 1 1 1 </scale> <uri> file://path_to_dae/textured.dae </uri> </mesh> </geometry> </visual> <!-- model --> <visual name= 'base_link_visual' > <pose> 0 0 0 0 0 0 </pose> <geometry> <mesh> <scale> 1 1 1 </scale> <uri> model://model_name/meshes/textured.dae </uri> </mesh> </geometry> </visual> laser sensor 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 <link name= \"hokuyo\" > <collision> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <box size= \"0.1 0.1 0.1\" /> </geometry> </collision> <visual> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <mesh filename= \"file://hokuyo.dae\" /> </geometry> </visual> <inertial> <mass value= \"1e-5\" /> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <inertia ixx= \"1e-6\" ixy= \"0\" ixz= \"0\" iyy= \"1e-6\" iyz= \"0\" izz= \"1e-6\" /> </inertial> </link> gazebo \u00b6 laser sensor 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 <gazebo reference= \"hokuyo\" > <sensor name= \"sensor_ray\" type= \"ray\" > <pose> 0.0 0 0 0 0 0 </pose> <ray> <scan> <horizontal> <samples> 720 </samples> <resolution> 1.0 </resolution> <min_angle> -1.570796 </min_angle> <max_angle> 1.570796 </max_angle> </horizontal> </scan> <range> <min> 0.120000 </min> <max> 3.5 </max> </range> <noise> <type> gaussian </type> <mean> 0.0 </mean> <stddev> 0.01 </stddev> </noise> </ray> <always_on> true </always_on> <visualize> true </visualize> <topic> scan </topic> <update_rate> 40.0 </update_rate> <plugin name= \"laser\" filename= \"libgazebo_ros_ray_sensor.so\" > <ros> <remapping> ~/out:=scan </remapping> </ros> <output_type> sensor_msgs/LaserScan </output_type> <!-- <frame_name>base_scan</frame_name> --> </plugin> </sensor> </gazebo> check for ray_gpu Check ROS2 ray_gpu sensor launch \u00b6 Add gazebo environment variables (GAZEBO_RESOURCE_PATH) gazebo launch file gz_v3.launch.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch.actions import IncludeLaunchDescription from launch.actions import DeclareLaunchArgument from launch.actions import SetEnvironmentVariable from launch.substitutions import EnvironmentVariable from launch.logging import logging from launch.launch_description_sources import PythonLaunchDescriptionSource from launch_ros.actions import Node import xacro log = logging . getLogger () def generate_launch_description (): pkg_skbot_description = get_package_share_directory ( \"skbot_description\" ) pkg_gazebo_ros = get_package_share_directory ( \"gazebo_ros\" ) pkg_skbot_gazebo = get_package_share_directory ( \"skbot_gazebo\" ) robot_description_path = os . path . join ( pkg_skbot_description , \"urdf\" , \"skbot.xacro\" , ) robot_description_meshes = os . path . join ( pkg_skbot_description , \"meshes\" ) gazebo_resource_path = os . environ . get ( \"GAZEBO_RESOURCE_PATH\" ) gazebo_resource_path = SetEnvironmentVariable ( name = \"GAZEBO_RESOURCE_PATH\" , value = [ robot_description_meshes , \":\" + gazebo_resource_path ] ) robot_description_raw = xacro . process_file ( robot_description_path ) . toxml () gazebo = IncludeLaunchDescription ( PythonLaunchDescriptionSource ( os . path . join ( pkg_gazebo_ros , \"launch\" , \"gazebo.launch.py\" )) ) world_arg = DeclareLaunchArgument ( \"world\" , default_value = [ os . path . join ( pkg_skbot_gazebo , \"worlds\" , \"skbot.world\" ), \"\" ], description = \"hello skbot world\" ) verbose_arg = DeclareLaunchArgument ( \"verbose\" , default_value = [ \"true\" ], description = \"verbose log\" ) robot_state_publisher_node = Node ( package = 'robot_state_publisher' , executable = 'robot_state_publisher' , name = 'robot_state_publisher' , output = 'screen' , parameters = [{ 'robot_description' : robot_description_raw , 'use_sim_time' : True }]) spawn_robot_node = Node ( package = 'gazebo_ros' , executable = 'spawn_entity.py' , name = 'urdf_spawner' , output = 'screen' , arguments = [ \"-topic\" , \"/robot_description\" , \"-entity\" , \"skbot\" ]) return LaunchDescription ([ robot_state_publisher_node , world_arg , verbose_arg , gazebo_resource_path , gazebo , spawn_robot_node ]) Rviz \u00b6 Add LaserScan with topic scan Change LaserScan/Size(m) to 0.05 for better visualization","title":"laser scan"},{"location":"part3/laser/#urdf","text":"","title":"urdf"},{"location":"part3/laser/#urdf-with-mesh","text":"mesh file location skbot_description/meshes folder Add this folder to gazebo env. variable GAZEBO_RESOURCE_PATH (launch file) load resource file model <!-- file --> <visual name= 'base_link_visual' > <pose> 0 0 0 0 0 0 </pose> <geometry> <mesh> <scale> 1 1 1 </scale> <uri> file://path_to_dae/textured.dae </uri> </mesh> </geometry> </visual> <!-- model --> <visual name= 'base_link_visual' > <pose> 0 0 0 0 0 0 </pose> <geometry> <mesh> <scale> 1 1 1 </scale> <uri> model://model_name/meshes/textured.dae </uri> </mesh> </geometry> </visual> laser sensor 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 <link name= \"hokuyo\" > <collision> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <box size= \"0.1 0.1 0.1\" /> </geometry> </collision> <visual> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <mesh filename= \"file://hokuyo.dae\" /> </geometry> </visual> <inertial> <mass value= \"1e-5\" /> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <inertia ixx= \"1e-6\" ixy= \"0\" ixz= \"0\" iyy= \"1e-6\" iyz= \"0\" izz= \"1e-6\" /> </inertial> </link>","title":"urdf with mesh"},{"location":"part3/laser/#gazebo","text":"laser sensor 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 <gazebo reference= \"hokuyo\" > <sensor name= \"sensor_ray\" type= \"ray\" > <pose> 0.0 0 0 0 0 0 </pose> <ray> <scan> <horizontal> <samples> 720 </samples> <resolution> 1.0 </resolution> <min_angle> -1.570796 </min_angle> <max_angle> 1.570796 </max_angle> </horizontal> </scan> <range> <min> 0.120000 </min> <max> 3.5 </max> </range> <noise> <type> gaussian </type> <mean> 0.0 </mean> <stddev> 0.01 </stddev> </noise> </ray> <always_on> true </always_on> <visualize> true </visualize> <topic> scan </topic> <update_rate> 40.0 </update_rate> <plugin name= \"laser\" filename= \"libgazebo_ros_ray_sensor.so\" > <ros> <remapping> ~/out:=scan </remapping> </ros> <output_type> sensor_msgs/LaserScan </output_type> <!-- <frame_name>base_scan</frame_name> --> </plugin> </sensor> </gazebo> check for ray_gpu Check ROS2 ray_gpu sensor","title":"gazebo"},{"location":"part3/laser/#launch","text":"Add gazebo environment variables (GAZEBO_RESOURCE_PATH) gazebo launch file gz_v3.launch.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch.actions import IncludeLaunchDescription from launch.actions import DeclareLaunchArgument from launch.actions import SetEnvironmentVariable from launch.substitutions import EnvironmentVariable from launch.logging import logging from launch.launch_description_sources import PythonLaunchDescriptionSource from launch_ros.actions import Node import xacro log = logging . getLogger () def generate_launch_description (): pkg_skbot_description = get_package_share_directory ( \"skbot_description\" ) pkg_gazebo_ros = get_package_share_directory ( \"gazebo_ros\" ) pkg_skbot_gazebo = get_package_share_directory ( \"skbot_gazebo\" ) robot_description_path = os . path . join ( pkg_skbot_description , \"urdf\" , \"skbot.xacro\" , ) robot_description_meshes = os . path . join ( pkg_skbot_description , \"meshes\" ) gazebo_resource_path = os . environ . get ( \"GAZEBO_RESOURCE_PATH\" ) gazebo_resource_path = SetEnvironmentVariable ( name = \"GAZEBO_RESOURCE_PATH\" , value = [ robot_description_meshes , \":\" + gazebo_resource_path ] ) robot_description_raw = xacro . process_file ( robot_description_path ) . toxml () gazebo = IncludeLaunchDescription ( PythonLaunchDescriptionSource ( os . path . join ( pkg_gazebo_ros , \"launch\" , \"gazebo.launch.py\" )) ) world_arg = DeclareLaunchArgument ( \"world\" , default_value = [ os . path . join ( pkg_skbot_gazebo , \"worlds\" , \"skbot.world\" ), \"\" ], description = \"hello skbot world\" ) verbose_arg = DeclareLaunchArgument ( \"verbose\" , default_value = [ \"true\" ], description = \"verbose log\" ) robot_state_publisher_node = Node ( package = 'robot_state_publisher' , executable = 'robot_state_publisher' , name = 'robot_state_publisher' , output = 'screen' , parameters = [{ 'robot_description' : robot_description_raw , 'use_sim_time' : True }]) spawn_robot_node = Node ( package = 'gazebo_ros' , executable = 'spawn_entity.py' , name = 'urdf_spawner' , output = 'screen' , arguments = [ \"-topic\" , \"/robot_description\" , \"-entity\" , \"skbot\" ]) return LaunchDescription ([ robot_state_publisher_node , world_arg , verbose_arg , gazebo_resource_path , gazebo , spawn_robot_node ])","title":"launch"},{"location":"part3/laser/#rviz","text":"Add LaserScan with topic scan Change LaserScan/Size(m) to 0.05 for better visualization","title":"Rviz"},{"location":"part3/launch/","text":"Launch \u00b6 Using gazebo_ros package to launch gazebo Declare world and gazebo command args gz_v2.launch.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch.actions import IncludeLaunchDescription from launch.actions import DeclareLaunchArgument from launch.launch_description_sources import PythonLaunchDescriptionSource from launch_ros.actions import Node import xacro def generate_launch_description (): pkg_skbot_description = get_package_share_directory ( \"skbot_description\" ) pkg_gazebo_ros = get_package_share_directory ( \"gazebo_ros\" ) pkg_skbot_gazebo = get_package_share_directory ( \"skbot_gazebo\" ) robot_description_path = os . path . join ( pkg_skbot_description , \"urdf\" , \"skbot.xacro\" , ) urdf_path = os . path . join ( pkg_skbot_description , \"urdf\" , \"skbot.urdf\" ) doc = xacro . process_file ( robot_description_path ) . toxml () out = xacro . open_output ( urdf_path ) out . write ( doc ) gazebo = IncludeLaunchDescription ( PythonLaunchDescriptionSource ( os . path . join ( pkg_gazebo_ros , \"launch\" , \"gazebo.launch.py\" )) ) world_arg = DeclareLaunchArgument ( \"world\" , default_value = [ os . path . join ( pkg_skbot_gazebo , \"worlds\" , \"skbot.world\" ), \"\" ], description = \"hello skbot world\" ) verbose_arg = DeclareLaunchArgument ( \"verbose\" , default_value = [ \"true\" ], description = \"verbose log\" ) robot_state_publisher_node = Node ( package = 'robot_state_publisher' , executable = 'robot_state_publisher' , name = 'robot_state_publisher' , output = 'screen' , arguments = [ urdf_path ]) spawn_robot_node = Node ( package = 'gazebo_ros' , executable = 'spawn_entity.py' , name = 'urdf_spawner' , output = 'screen' , arguments = [ \"-topic\" , \"/robot_description\" , \"-entity\" , \"skbot\" ]) return LaunchDescription ([ robot_state_publisher_node , world_arg , verbose_arg , gazebo , spawn_robot_node ])","title":"Launch"},{"location":"part3/launch/#launch","text":"Using gazebo_ros package to launch gazebo Declare world and gazebo command args gz_v2.launch.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch.actions import IncludeLaunchDescription from launch.actions import DeclareLaunchArgument from launch.launch_description_sources import PythonLaunchDescriptionSource from launch_ros.actions import Node import xacro def generate_launch_description (): pkg_skbot_description = get_package_share_directory ( \"skbot_description\" ) pkg_gazebo_ros = get_package_share_directory ( \"gazebo_ros\" ) pkg_skbot_gazebo = get_package_share_directory ( \"skbot_gazebo\" ) robot_description_path = os . path . join ( pkg_skbot_description , \"urdf\" , \"skbot.xacro\" , ) urdf_path = os . path . join ( pkg_skbot_description , \"urdf\" , \"skbot.urdf\" ) doc = xacro . process_file ( robot_description_path ) . toxml () out = xacro . open_output ( urdf_path ) out . write ( doc ) gazebo = IncludeLaunchDescription ( PythonLaunchDescriptionSource ( os . path . join ( pkg_gazebo_ros , \"launch\" , \"gazebo.launch.py\" )) ) world_arg = DeclareLaunchArgument ( \"world\" , default_value = [ os . path . join ( pkg_skbot_gazebo , \"worlds\" , \"skbot.world\" ), \"\" ], description = \"hello skbot world\" ) verbose_arg = DeclareLaunchArgument ( \"verbose\" , default_value = [ \"true\" ], description = \"verbose log\" ) robot_state_publisher_node = Node ( package = 'robot_state_publisher' , executable = 'robot_state_publisher' , name = 'robot_state_publisher' , output = 'screen' , arguments = [ urdf_path ]) spawn_robot_node = Node ( package = 'gazebo_ros' , executable = 'spawn_entity.py' , name = 'urdf_spawner' , output = 'screen' , arguments = [ \"-topic\" , \"/robot_description\" , \"-entity\" , \"skbot\" ]) return LaunchDescription ([ robot_state_publisher_node , world_arg , verbose_arg , gazebo , spawn_robot_node ])","title":"Launch"},{"location":"part4/goto/","text":"Command skbot goto point - Read odom topic - Send Twist msg echo message echo part of message using grep ros2 topic echo /skbot/odom | grep -A 3 \"position\" ros2 topic echo /skbot/odom | grep -A 4 \"orientation\" Code \u00b6 goto.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 import rclpy from rclpy.node import Node from sensor_msgs.msg import LaserScan from geometry_msgs.msg import Twist , Point from nav_msgs.msg import Odometry # TODO: check it from transforms3d.euler import euler2quat , quat2euler import math from rclpy.qos import QoSProfile , QoSReliabilityPolicy , QoSHistoryPolicy from enum import IntEnum ANGULAR_SPEED = 0.3 LINEAR_SPEED = 0.3 ONE_METER = 1 DESIRED_POSE : Point = Point ( x =- 5.0 , y = 7.0 , z = 0.0 ) DESIRED_PRECISION = 0.3 DESIRED_YAW = math . pi / 90 WORKING_HZ = 10 def euler_from_quaternion ( x , y , z , w ): \"\"\" Convert a quaternion into euler angles (roll, pitch, yaw) \"\"\" t0 = + 2.0 * ( w * x + y * z ) t1 = + 1.0 - 2.0 * ( x * x + y * y ) roll_x = math . atan2 ( t0 , t1 ) t2 = + 2.0 * ( w * y - z * x ) t2 = + 1.0 if t2 > + 1.0 else t2 t2 = - 1.0 if t2 < - 1.0 else t2 pitch_y = math . asin ( t2 ) t3 = + 2.0 * ( w * z + x * y ) t4 = + 1.0 - 2.0 * ( y * y + z * z ) yaw_z = math . atan2 ( t3 , t4 ) return roll_x , pitch_y , yaw_z class EulerEnum ( IntEnum ): ROLL = 0 PITCH = 1 YAW = 2 class StateEnum ( IntEnum ): YAW = 0 FORWARD = 1 DONE = 2 class MyNode ( Node ): def __init__ ( self ): super () . __init__ ( 'skbot_motion_scan' ) qos_profile = QoSProfile ( reliability = QoSReliabilityPolicy . RMW_QOS_POLICY_RELIABILITY_RELIABLE , history = QoSHistoryPolicy . RMW_QOS_POLICY_HISTORY_SYSTEM_DEFAULT , depth = 1 ) self . __state = StateEnum . YAW self . __pose : Point = None self . __yaw : float = 0 self . __change_state ( self . __state ) self . create_timer ( 1 / WORKING_HZ , self . __state_machine ) self . __twist_pub = self . create_publisher ( Twist , \"/skbot/cmd_vel\" , qos_profile ) self . sub = self . create_subscription ( Odometry , \"/skbot/odom\" , self . __odom_handler , qos_profile ) def __odom_handler ( self , msg : Odometry ): \"\"\" ros2 topic echo /skbot/odom | grep -A 4 \"position\" ros2 topic echo /skbot/odom | grep -A 4 \"orientation\" \"\"\" self . __pose = msg . pose . pose . position euler = euler_from_quaternion ( msg . pose . pose . orientation . x , msg . pose . pose . orientation . y , msg . pose . pose . orientation . z , msg . pose . pose . orientation . w ) self . __yaw = euler [ EulerEnum . YAW ] def __calc_yaw_error ( self ): desired_yaw = math . atan2 ( DESIRED_POSE . y - self . __pose . y , DESIRED_POSE . x - self . __pose . x ) yaw_err = desired_yaw - self . __yaw return yaw_err def __fix_yaw ( self ): yaw_err = self . __calc_yaw_error () z = ANGULAR_SPEED if math . fabs ( yaw_err ) > DESIRED_YAW : if yaw_err < 0 : z = - ANGULAR_SPEED self . __pub_twist ( 0 , z ) else : self . __change_state ( StateEnum . FORWARD ) def __go_straight ( self ): err_pos = math . sqrt ( pow ( DESIRED_POSE . y - self . __pose . y , 2 ) + pow ( DESIRED_POSE . x - self . __pose . x , 2 ) ) if err_pos > DESIRED_PRECISION : self . __pub_twist ( LINEAR_SPEED , 0 ) else : self . __change_state ( StateEnum . DONE ) yaw_err = self . __calc_yaw_error () if math . fabs ( yaw_err ) > DESIRED_YAW : self . __change_state ( StateEnum . YAW ) def __state_machine ( self ): if self . __state == StateEnum . YAW : self . __fix_yaw () elif self . __state == StateEnum . FORWARD : self . __go_straight () elif self . __state == StateEnum . DONE : self . __done () def __done ( self ): self . __pub_twist ( 0 , 0 ) def __pub_twist ( self , x , z ): twist_msg = Twist () twist_msg . linear . x = float ( x ) twist_msg . angular . z = float ( z ) self . __twist_pub . publish ( twist_msg ) def __change_state ( self , state : StateEnum ): self . __state = state self . get_logger () . info ( f \"State changed to: { state . name } \" ) def main ( args = None ): rclpy . init ( args = args ) node = MyNode () rclpy . spin ( node ) rclpy . shutdown () if __name__ == '__main__' : main () Transforms3d pip install transforms3d euler and quaterninon Try to use transforms3d quat2euler without success move to util function def euler_from_quaternion ( x , y , z , w ): \"\"\" Convert a quaternion into euler angles (roll, pitch, yaw) \"\"\" t0 = + 2.0 * ( w * x + y * z ) t1 = + 1.0 - 2.0 * ( x * x + y * y ) roll_x = math . atan2 ( t0 , t1 ) t2 = + 2.0 * ( w * y - z * x ) t2 = + 1.0 if t2 > + 1.0 else t2 t2 = - 1.0 if t2 < - 1.0 else t2 pitch_y = math . asin ( t2 ) t3 = + 2.0 * ( w * z + x * y ) t4 = + 1.0 - 2.0 * ( y * y + z * z ) yaw_z = math . atan2 ( t3 , t4 ) return roll_x , pitch_y , yaw_z","title":"go to"},{"location":"part4/goto/#code","text":"goto.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 import rclpy from rclpy.node import Node from sensor_msgs.msg import LaserScan from geometry_msgs.msg import Twist , Point from nav_msgs.msg import Odometry # TODO: check it from transforms3d.euler import euler2quat , quat2euler import math from rclpy.qos import QoSProfile , QoSReliabilityPolicy , QoSHistoryPolicy from enum import IntEnum ANGULAR_SPEED = 0.3 LINEAR_SPEED = 0.3 ONE_METER = 1 DESIRED_POSE : Point = Point ( x =- 5.0 , y = 7.0 , z = 0.0 ) DESIRED_PRECISION = 0.3 DESIRED_YAW = math . pi / 90 WORKING_HZ = 10 def euler_from_quaternion ( x , y , z , w ): \"\"\" Convert a quaternion into euler angles (roll, pitch, yaw) \"\"\" t0 = + 2.0 * ( w * x + y * z ) t1 = + 1.0 - 2.0 * ( x * x + y * y ) roll_x = math . atan2 ( t0 , t1 ) t2 = + 2.0 * ( w * y - z * x ) t2 = + 1.0 if t2 > + 1.0 else t2 t2 = - 1.0 if t2 < - 1.0 else t2 pitch_y = math . asin ( t2 ) t3 = + 2.0 * ( w * z + x * y ) t4 = + 1.0 - 2.0 * ( y * y + z * z ) yaw_z = math . atan2 ( t3 , t4 ) return roll_x , pitch_y , yaw_z class EulerEnum ( IntEnum ): ROLL = 0 PITCH = 1 YAW = 2 class StateEnum ( IntEnum ): YAW = 0 FORWARD = 1 DONE = 2 class MyNode ( Node ): def __init__ ( self ): super () . __init__ ( 'skbot_motion_scan' ) qos_profile = QoSProfile ( reliability = QoSReliabilityPolicy . RMW_QOS_POLICY_RELIABILITY_RELIABLE , history = QoSHistoryPolicy . RMW_QOS_POLICY_HISTORY_SYSTEM_DEFAULT , depth = 1 ) self . __state = StateEnum . YAW self . __pose : Point = None self . __yaw : float = 0 self . __change_state ( self . __state ) self . create_timer ( 1 / WORKING_HZ , self . __state_machine ) self . __twist_pub = self . create_publisher ( Twist , \"/skbot/cmd_vel\" , qos_profile ) self . sub = self . create_subscription ( Odometry , \"/skbot/odom\" , self . __odom_handler , qos_profile ) def __odom_handler ( self , msg : Odometry ): \"\"\" ros2 topic echo /skbot/odom | grep -A 4 \"position\" ros2 topic echo /skbot/odom | grep -A 4 \"orientation\" \"\"\" self . __pose = msg . pose . pose . position euler = euler_from_quaternion ( msg . pose . pose . orientation . x , msg . pose . pose . orientation . y , msg . pose . pose . orientation . z , msg . pose . pose . orientation . w ) self . __yaw = euler [ EulerEnum . YAW ] def __calc_yaw_error ( self ): desired_yaw = math . atan2 ( DESIRED_POSE . y - self . __pose . y , DESIRED_POSE . x - self . __pose . x ) yaw_err = desired_yaw - self . __yaw return yaw_err def __fix_yaw ( self ): yaw_err = self . __calc_yaw_error () z = ANGULAR_SPEED if math . fabs ( yaw_err ) > DESIRED_YAW : if yaw_err < 0 : z = - ANGULAR_SPEED self . __pub_twist ( 0 , z ) else : self . __change_state ( StateEnum . FORWARD ) def __go_straight ( self ): err_pos = math . sqrt ( pow ( DESIRED_POSE . y - self . __pose . y , 2 ) + pow ( DESIRED_POSE . x - self . __pose . x , 2 ) ) if err_pos > DESIRED_PRECISION : self . __pub_twist ( LINEAR_SPEED , 0 ) else : self . __change_state ( StateEnum . DONE ) yaw_err = self . __calc_yaw_error () if math . fabs ( yaw_err ) > DESIRED_YAW : self . __change_state ( StateEnum . YAW ) def __state_machine ( self ): if self . __state == StateEnum . YAW : self . __fix_yaw () elif self . __state == StateEnum . FORWARD : self . __go_straight () elif self . __state == StateEnum . DONE : self . __done () def __done ( self ): self . __pub_twist ( 0 , 0 ) def __pub_twist ( self , x , z ): twist_msg = Twist () twist_msg . linear . x = float ( x ) twist_msg . angular . z = float ( z ) self . __twist_pub . publish ( twist_msg ) def __change_state ( self , state : StateEnum ): self . __state = state self . get_logger () . info ( f \"State changed to: { state . name } \" ) def main ( args = None ): rclpy . init ( args = args ) node = MyNode () rclpy . spin ( node ) rclpy . shutdown () if __name__ == '__main__' : main () Transforms3d pip install transforms3d euler and quaterninon Try to use transforms3d quat2euler without success move to util function def euler_from_quaternion ( x , y , z , w ): \"\"\" Convert a quaternion into euler angles (roll, pitch, yaw) \"\"\" t0 = + 2.0 * ( w * x + y * z ) t1 = + 1.0 - 2.0 * ( x * x + y * y ) roll_x = math . atan2 ( t0 , t1 ) t2 = + 2.0 * ( w * y - z * x ) t2 = + 1.0 if t2 > + 1.0 else t2 t2 = - 1.0 if t2 < - 1.0 else t2 pitch_y = math . asin ( t2 ) t3 = + 2.0 * ( w * z + x * y ) t4 = + 1.0 - 2.0 * ( y * y + z * z ) yaw_z = math . atan2 ( t3 , t4 ) return roll_x , pitch_y , yaw_z","title":"Code"},{"location":"part4/hello/","text":"Node (Hello) \u00b6 hello.py import rclpy from rclpy.node import Node class MyNode ( Node ): def __init__ ( self ): super () . __init__ ( 'skbot_motion' ) self . create_timer ( 1 , self . timer_callback ) def timer_callback ( self ): self . get_logger () . info ( \"Hello skbot\" ) def main ( args = None ): rclpy . init ( args = args ) node = MyNode () rclpy . spin ( node ) rclpy . shutdown () if __name__ == '__main__' : main () setup.py \u00b6 Add entry node entry_points = { 'console_scripts' : [ 'hello = skbot_motion.hello:main' ], } package.xml \u00b6 <exec_depend> rclpy </exec_depend> build and run \u00b6 # Build colcon build --symlink-install --packages-select skbot_motion # Source source install/setup.bash # Run ros2 run skbot_motion hello References \u00b6 m2wr Write a Minimal ROS2 Python Node","title":"hello python node"},{"location":"part4/hello/#node-hello","text":"hello.py import rclpy from rclpy.node import Node class MyNode ( Node ): def __init__ ( self ): super () . __init__ ( 'skbot_motion' ) self . create_timer ( 1 , self . timer_callback ) def timer_callback ( self ): self . get_logger () . info ( \"Hello skbot\" ) def main ( args = None ): rclpy . init ( args = args ) node = MyNode () rclpy . spin ( node ) rclpy . shutdown () if __name__ == '__main__' : main ()","title":"Node (Hello)"},{"location":"part4/hello/#setuppy","text":"Add entry node entry_points = { 'console_scripts' : [ 'hello = skbot_motion.hello:main' ], }","title":"setup.py"},{"location":"part4/hello/#packagexml","text":"<exec_depend> rclpy </exec_depend>","title":"package.xml"},{"location":"part4/hello/#build-and-run","text":"# Build colcon build --symlink-install --packages-select skbot_motion # Source source install/setup.bash # Run ros2 run skbot_motion hello","title":"build and run"},{"location":"part4/hello/#references","text":"m2wr Write a Minimal ROS2 Python Node","title":"References"},{"location":"part4/hello_laser/","text":"topic list ros2 topic list # /joint_states /robot_description /rosout /scan /skbot/cmd_vel /skbot/odom /skbot_camera/camera_info /skbot_camera/image_raw topic info ros2 topic info /scan Type: sensor_msgs/msg/LaserScan Publisher count: 1 Subscription count: 0 ros2 interface show sensor_msgs/msg/LaserScan # std_msgs/Header header float32 angle_min float32 angle_max float32 angle_increment float32 time_increment float32 scan_time float32 range_min float32 range_max float32 [] ranges float32 [] intensities info verbose ros2 topic info --verbose /scan Type: sensor_msgs/msg/LaserScan Publisher count: 1 Node name: laser Node namespace: / Topic type: sensor_msgs/msg/LaserScan Endpoint type: PUBLISHER GID: 01 .0f.d1.c7.1b.a2.89.9c.01.00.00.00.00.00.4f.03.00.00.00.00.00.00.00.00 QoS profile: Reliability: RMW_QOS_POLICY_RELIABILITY_RELIABLE Durability: RMW_QOS_POLICY_DURABILITY_VOLATILE Lifespan: 2147483651294967295 nanoseconds Deadline: 2147483651294967295 nanoseconds Liveliness: RMW_QOS_POLICY_LIVELINESS_AUTOMATIC Liveliness lease duration: 2147483651294967295 nanoseconds Subscription count: 0 Simple simple subscriber \u00b6 hello_laser.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 import rclpy from rclpy.node import Node from sensor_msgs.msg import LaserScan from rclpy.qos import QoSProfile , QoSReliabilityPolicy , QoSHistoryPolicy class MyNode ( Node ): def __init__ ( self ): super () . __init__ ( 'skbot_motion_scan' ) qos_profile = QoSProfile ( reliability = QoSReliabilityPolicy . RMW_QOS_POLICY_RELIABILITY_RELIABLE , history = QoSHistoryPolicy . RMW_QOS_POLICY_HISTORY_SYSTEM_DEFAULT , depth = 1 ) self . sub = self . create_subscription ( LaserScan , \"/scan\" , self . __scan_handler , qos_profile ) def __scan_handler ( self , msg : LaserScan ): self . get_logger () . info ( msg . header . frame_id ) def main ( args = None ): rclpy . init ( args = args ) node = MyNode () rclpy . spin ( node ) rclpy . shutdown () if __name__ == '__main__' : main ()","title":"read scan/laser data"},{"location":"part4/hello_laser/#simple-simple-subscriber","text":"hello_laser.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 import rclpy from rclpy.node import Node from sensor_msgs.msg import LaserScan from rclpy.qos import QoSProfile , QoSReliabilityPolicy , QoSHistoryPolicy class MyNode ( Node ): def __init__ ( self ): super () . __init__ ( 'skbot_motion_scan' ) qos_profile = QoSProfile ( reliability = QoSReliabilityPolicy . RMW_QOS_POLICY_RELIABILITY_RELIABLE , history = QoSHistoryPolicy . RMW_QOS_POLICY_HISTORY_SYSTEM_DEFAULT , depth = 1 ) self . sub = self . create_subscription ( LaserScan , \"/scan\" , self . __scan_handler , qos_profile ) def __scan_handler ( self , msg : LaserScan ): self . get_logger () . info ( msg . header . frame_id ) def main ( args = None ): rclpy . init ( args = args ) node = MyNode () rclpy . spin ( node ) rclpy . shutdown () if __name__ == '__main__' : main ()","title":"Simple simple subscriber"},{"location":"part4/wall_follow/","text":"copy write: www.theconstructsim.com Demo \u00b6 Run world01 from skbot_gazebo Run wall follow from skbot_motion Reference \u00b6 exploring-ros-2-wheeled-robot-part-5","title":"wall follow"},{"location":"part4/wall_follow/#demo","text":"Run world01 from skbot_gazebo Run wall follow from skbot_motion","title":"Demo"},{"location":"part4/wall_follow/#reference","text":"exploring-ros-2-wheeled-robot-part-5","title":"Reference"},{"location":"part5/","text":"","title":"Part5 - ROS2 Service"},{"location":"part5/interface/","text":"interface ROS2 interfaces msg and srv must be ament_cmake package ros2 pkg create skbot_interfaces --build-type ament_cmake pkg \u00b6 Add msg folder Add srv folder Add support in CMakelists.txt Add idl support in package.xml pkg folders and files \u00b6 1 2 3 4 5 6 7 \u251c\u2500\u2500 CMakeLists.txt \u251c\u2500\u2500 msg \u251c\u2500\u2500 package.xml \u251c\u2500\u2500 skbot_interfaces \u2502 \u2514\u2500\u2500 __init__.py \u2514\u2500\u2500 srv \u2514\u2500\u2500 AddTwoInts.srv srv \u00b6 Add service message files ( .srv ) under srv folder for example AddTwoInts.srv AddTwoInts.srv int64 a int64 b --- int64 sum CMakeLists.txt \u00b6 Add rosidl support Add python support (module discovery) python module discovery Support python module discovery - Create folder with package name - Add __init__.py file under this folder - Add ament_python_install_package command to CMakeLists ament_python_install_package ( ${ PROJECT_NAME } ) CMakeLists.txt addition find_package ( rosidl_default_generators REQUIRED ) rosidl_generate_interfaces ( ${ PROJECT_NAME } \"srv/AddTwoInts.srv\" ) # Python model discovery ament_python_install_package ( ${ PROJECT_NAME } ) package.xml \u00b6 Add rosidl support package.xml addition <build_depend> rosidl_default_generators </build_depend> <exec_depend> rosidl_default_runtime </exec_depend> <member_of_group> rosidl_interface_packages </member_of_group> Build and check \u00b6 colcon source install check colcon build --symlink-install --packages-select skbot_interfaces source install/setup.bash # list all interfaces ros2 interface list # show interface ros2 interface show skbot_interfaces/srv/AddTwoInts","title":"service interface"},{"location":"part5/interface/#pkg","text":"Add msg folder Add srv folder Add support in CMakelists.txt Add idl support in package.xml","title":"pkg"},{"location":"part5/interface/#pkg-folders-and-files","text":"1 2 3 4 5 6 7 \u251c\u2500\u2500 CMakeLists.txt \u251c\u2500\u2500 msg \u251c\u2500\u2500 package.xml \u251c\u2500\u2500 skbot_interfaces \u2502 \u2514\u2500\u2500 __init__.py \u2514\u2500\u2500 srv \u2514\u2500\u2500 AddTwoInts.srv","title":"pkg folders and files"},{"location":"part5/interface/#srv","text":"Add service message files ( .srv ) under srv folder for example AddTwoInts.srv AddTwoInts.srv int64 a int64 b --- int64 sum","title":"srv"},{"location":"part5/interface/#cmakeliststxt","text":"Add rosidl support Add python support (module discovery) python module discovery Support python module discovery - Create folder with package name - Add __init__.py file under this folder - Add ament_python_install_package command to CMakeLists ament_python_install_package ( ${ PROJECT_NAME } ) CMakeLists.txt addition find_package ( rosidl_default_generators REQUIRED ) rosidl_generate_interfaces ( ${ PROJECT_NAME } \"srv/AddTwoInts.srv\" ) # Python model discovery ament_python_install_package ( ${ PROJECT_NAME } )","title":"CMakeLists.txt"},{"location":"part5/interface/#packagexml","text":"Add rosidl support package.xml addition <build_depend> rosidl_default_generators </build_depend> <exec_depend> rosidl_default_runtime </exec_depend> <member_of_group> rosidl_interface_packages </member_of_group>","title":"package.xml"},{"location":"part5/interface/#build-and-check","text":"colcon source install check colcon build --symlink-install --packages-select skbot_interfaces source install/setup.bash # list all interfaces ros2 interface list # show interface ros2 interface show skbot_interfaces/srv/AddTwoInts","title":"Build and check"},{"location":"part5/parameter/","text":"A parameter is a configuration value of a node declare node parameter param list parma get param set param sump param load","title":"ROS2 parameter"},{"location":"part5/service/","text":"simple_service 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 import rclpy from rclpy.node import Node from skbot_interfaces.srv import AddTwoInts class SimpleSRV ( Node ): def __init__ ( self ): super () . __init__ ( \"Simple_srv\" ) self . __service = self . create_service ( AddTwoInts , \"simple_service\" , self . __srv_handler ) self . get_logger () . info ( \"Server Started\" ) def __srv_handler ( self , request : AddTwoInts . Request , response : AddTwoInts . Response ): self . get_logger () . info ( \"info msg\" ) response . sum = request . a + request . b return response def main ( args = None ): rclpy . init ( args = args ) node = SimpleSRV () rclpy . spin ( node ) rclpy . shutdown () if __name__ == \"__main__\" : main () pylance resolve Add \"python.analysis.extraPaths\": [] with project path to user settings.json for example: py t ho n .a nal ysis.ex tra Pa t hs \": [ \" i nstall /skbo t _i nterfa ces/lib/py t ho n 3.8 /si te - packages/\" ] CLI \u00b6 Calling service from command line 1 2 3 4 5 6 7 8 9 # ros2 service call <service> <type> <data> ros2 service call /simple_service skbot_interfaces/srv/AddTwoInts \"{a: 1,b: 2}\" # Result waiting for service to become available... requester: making request: skbot_interfaces.srv.AddTwoInts_Request ( a = 1 , b = 2 ) response: skbot_interfaces.srv.AddTwoInts_Response ( sum = 3 ) Simple client \u00b6 Async \u00b6 simple_async_client.py import rclpy from rclpy.node import Node from skbot_interfaces.srv import AddTwoInts class MinimalClientAsync ( Node ): def __init__ ( self ): super () . __init__ ( 'minimal_client_async' ) self . cli = self . create_client ( AddTwoInts , 'simple_service' ) while not self . cli . wait_for_service ( timeout_sec = 1.0 ): self . get_logger () . info ( 'service not available, waiting again...' ) self . req = AddTwoInts . Request () def send_request ( self ): self . req . a = 1 self . req . b = 2 self . future = self . cli . call_async ( self . req ) def main ( args = None ): rclpy . init ( args = args ) minimal_client = MinimalClientAsync () minimal_client . send_request () while rclpy . ok (): rclpy . spin_once ( minimal_client ) if minimal_client . future . done (): try : response = minimal_client . future . result () except Exception as e : minimal_client . get_logger () . info ( 'Service call failed %r ' % ( e ,)) else : minimal_client . get_logger () . info ( 'Result of add_two_ints: for %d + %d = %d ' % ( minimal_client . req . a , minimal_client . req . b , response . sum )) break minimal_client . destroy_node () rclpy . shutdown () if __name__ == '__main__' : main () Sync \u00b6 simple_sync_client.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 from threading import Thread import rclpy from rclpy.node import Node from skbot_interfaces.srv import AddTwoInts class MinimalClientSync ( Node ): def __init__ ( self ): super () . __init__ ( 'minimal_client_sync' ) self . cli = self . create_client ( AddTwoInts , 'simple_service' ) while not self . cli . wait_for_service ( timeout_sec = 1.0 ): self . get_logger () . info ( 'service not available, waiting again...' ) self . req = AddTwoInts . Request () def send_request ( self ): self . req . a = 1 self . req . b = 2 return self . cli . call ( self . req ) # This only works because rclpy.spin() is called in a separate thread below. # Another configuration, like spinning later in main() or calling this method from a timer callback, would result in a deadlock. def main (): rclpy . init () minimal_client = MinimalClientSync () spin_thread = Thread ( target = rclpy . spin , args = ( minimal_client ,)) spin_thread . start () response = minimal_client . send_request () minimal_client . get_logger () . info ( 'Result of add_two_ints: for %d + %d = %d ' % ( minimal_client . req . a , minimal_client . req . b , response . sum )) minimal_client . destroy_node () rclpy . shutdown () if __name__ == '__main__' : main () thread spin Sync client work only if run spin in separate thread check line 27, 28","title":"service"},{"location":"part5/service/#cli","text":"Calling service from command line 1 2 3 4 5 6 7 8 9 # ros2 service call <service> <type> <data> ros2 service call /simple_service skbot_interfaces/srv/AddTwoInts \"{a: 1,b: 2}\" # Result waiting for service to become available... requester: making request: skbot_interfaces.srv.AddTwoInts_Request ( a = 1 , b = 2 ) response: skbot_interfaces.srv.AddTwoInts_Response ( sum = 3 )","title":"CLI"},{"location":"part5/service/#simple-client","text":"","title":"Simple client"},{"location":"part5/service/#async","text":"simple_async_client.py import rclpy from rclpy.node import Node from skbot_interfaces.srv import AddTwoInts class MinimalClientAsync ( Node ): def __init__ ( self ): super () . __init__ ( 'minimal_client_async' ) self . cli = self . create_client ( AddTwoInts , 'simple_service' ) while not self . cli . wait_for_service ( timeout_sec = 1.0 ): self . get_logger () . info ( 'service not available, waiting again...' ) self . req = AddTwoInts . Request () def send_request ( self ): self . req . a = 1 self . req . b = 2 self . future = self . cli . call_async ( self . req ) def main ( args = None ): rclpy . init ( args = args ) minimal_client = MinimalClientAsync () minimal_client . send_request () while rclpy . ok (): rclpy . spin_once ( minimal_client ) if minimal_client . future . done (): try : response = minimal_client . future . result () except Exception as e : minimal_client . get_logger () . info ( 'Service call failed %r ' % ( e ,)) else : minimal_client . get_logger () . info ( 'Result of add_two_ints: for %d + %d = %d ' % ( minimal_client . req . a , minimal_client . req . b , response . sum )) break minimal_client . destroy_node () rclpy . shutdown () if __name__ == '__main__' : main ()","title":"Async"},{"location":"part5/service/#sync","text":"simple_sync_client.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 from threading import Thread import rclpy from rclpy.node import Node from skbot_interfaces.srv import AddTwoInts class MinimalClientSync ( Node ): def __init__ ( self ): super () . __init__ ( 'minimal_client_sync' ) self . cli = self . create_client ( AddTwoInts , 'simple_service' ) while not self . cli . wait_for_service ( timeout_sec = 1.0 ): self . get_logger () . info ( 'service not available, waiting again...' ) self . req = AddTwoInts . Request () def send_request ( self ): self . req . a = 1 self . req . b = 2 return self . cli . call ( self . req ) # This only works because rclpy.spin() is called in a separate thread below. # Another configuration, like spinning later in main() or calling this method from a timer callback, would result in a deadlock. def main (): rclpy . init () minimal_client = MinimalClientSync () spin_thread = Thread ( target = rclpy . spin , args = ( minimal_client ,)) spin_thread . start () response = minimal_client . send_request () minimal_client . get_logger () . info ( 'Result of add_two_ints: for %d + %d = %d ' % ( minimal_client . req . a , minimal_client . req . b , response . sum )) minimal_client . destroy_node () rclpy . shutdown () if __name__ == '__main__' : main () thread spin Sync client work only if run spin in separate thread check line 27, 28","title":"Sync"},{"location":"px4/ros2/","text":"ROS 2 User Guide (PX4-ROS 2 Bridge) Setup \u00b6 Install Fast DDS Build ROS2 workspace Fast DDS \u00b6 Fast DDS Installation Gradle Recommend version 6.3 - Download binary from ... todo - Unzip to /opt folder (or other) - Fix PATH install Recommend to compile from source - Ubuntu 20.04 - Foonathan - Fast DDS 2.0.2 - Fast RTSP-Gen 1.0.4 (not later or grater) - java JDK install by PX4 ubuntu setup script FASTRTPSGEN_DIR Set environment variable if not a default installation ROS2 Workspace \u00b6 Build ROS 2 Workspace Terminal 1 # SITL start micrortps_client on port 2019,2020 make px4_sitl_rtps gazebo Terminal2 micrortps_agent -t UDP Terminal3 # my demo node # hello -> run sensor_combain ros2 run my_px4 hello ROS2 Example \u00b6 import rclpy from rclpy.node import Node from px4_msgs.msg import SensorCombined from rclpy.qos import QoSProfile , QoSReliabilityPolicy , QoSHistoryPolicy class MyNode ( Node ): def __init__ ( self ): super () . __init__ ( 'my_px4' ) qos_profile = QoSProfile ( reliability = QoSReliabilityPolicy . RMW_QOS_POLICY_RELIABILITY_RELIABLE , history = QoSHistoryPolicy . RMW_QOS_POLICY_HISTORY_SYSTEM_DEFAULT , depth = 1 ) self . create_subscription ( SensorCombined , \"fmu/sensor_combined/out\" , self . __handler , qos_profile ) def __handler ( self , msg ): self . get_logger () . info ( str ( msg . gyro_rad [ 0 ])) def main ( args = None ): rclpy . init ( args = args ) node = MyNode () rclpy . spin ( node ) rclpy . shutdown () if __name__ == '__main__' : main () References \u00b6 Fast DDS Installation ROS 2 User Guide (PX4-ROS 2 Bridge) ROS 2 Offboard Control Example","title":"PX4 ROS2"},{"location":"px4/ros2/#setup","text":"Install Fast DDS Build ROS2 workspace","title":"Setup"},{"location":"px4/ros2/#fast-dds","text":"Fast DDS Installation Gradle Recommend version 6.3 - Download binary from ... todo - Unzip to /opt folder (or other) - Fix PATH install Recommend to compile from source - Ubuntu 20.04 - Foonathan - Fast DDS 2.0.2 - Fast RTSP-Gen 1.0.4 (not later or grater) - java JDK install by PX4 ubuntu setup script FASTRTPSGEN_DIR Set environment variable if not a default installation","title":"Fast DDS"},{"location":"px4/ros2/#ros2-workspace","text":"Build ROS 2 Workspace Terminal 1 # SITL start micrortps_client on port 2019,2020 make px4_sitl_rtps gazebo Terminal2 micrortps_agent -t UDP Terminal3 # my demo node # hello -> run sensor_combain ros2 run my_px4 hello","title":"ROS2 Workspace"},{"location":"px4/ros2/#ros2-example","text":"import rclpy from rclpy.node import Node from px4_msgs.msg import SensorCombined from rclpy.qos import QoSProfile , QoSReliabilityPolicy , QoSHistoryPolicy class MyNode ( Node ): def __init__ ( self ): super () . __init__ ( 'my_px4' ) qos_profile = QoSProfile ( reliability = QoSReliabilityPolicy . RMW_QOS_POLICY_RELIABILITY_RELIABLE , history = QoSHistoryPolicy . RMW_QOS_POLICY_HISTORY_SYSTEM_DEFAULT , depth = 1 ) self . create_subscription ( SensorCombined , \"fmu/sensor_combined/out\" , self . __handler , qos_profile ) def __handler ( self , msg ): self . get_logger () . info ( str ( msg . gyro_rad [ 0 ])) def main ( args = None ): rclpy . init ( args = args ) node = MyNode () rclpy . spin ( node ) rclpy . shutdown () if __name__ == '__main__' : main ()","title":"ROS2 Example"},{"location":"px4/ros2/#references","text":"Fast DDS Installation ROS 2 User Guide (PX4-ROS 2 Bridge) ROS 2 Offboard Control Example","title":"References"},{"location":"resources/course_to/","text":"Courses \u00b6 Control of Mobile Robots-1.1 Control of Mobile Robots ETHzurich - Self-Driving Cars with Duckietown ETHzurich - Autonomous Mobile Robots Control Bootcamp","title":"courses"},{"location":"resources/course_to/#courses","text":"Control of Mobile Robots-1.1 Control of Mobile Robots ETHzurich - Self-Driving Cars with Duckietown ETHzurich - Autonomous Mobile Robots Control Bootcamp","title":"Courses"},{"location":"vscode/extensions/","text":"Extensions \u00b6 Utils Draw and viewer ROS Utils \u00b6 Auto snippets \u00b6 Insert a snippet when opening an empty file Marketplace Examples \u00b6 Insert file template for gazebo sdf model config \"autoSnippet.snippets\": [ { \"pattern\": \"**/model.config\", \"snippet\": \"gazebo_model_config\" } ] gazebo_model_config snippet snippet \"gazebo_model_config\" : { \"prefix\" : \"gz_config\" , \"body\" : [ \"<?xml version=\\\"1.0\\\"?>\" , \"<model>\" , \" <name>${1}</name>\" , \" <version>1.0</version>\" , \" <sdf version=\\\"${2|1.5,1.6|}\\\">${3:${1}}.sdf</sdf>\" , \" <author>\" , \" <name></name>\" , \" <email></email>\" , \" </author>\" , \" <description>\" , \" </description>\" , \"</model>\" ], \"description\" : \"gazebo model config file template\" } Run on Save \u00b6 Run commands when a file is saved in vscode. marketplace Example \u00b6 Run xacro util to generate urdf or sdf files from xacro run xacro \"emeraldwalk.runonsave\" : { \"commands\" : [ { \"match\" : \".sdf.xacro\" , \"cmd\" : \"export PYTHONPATH=/opt/ros/foxy/lib/python3.8/site-packages && /opt/ros/foxy/bin/xacro ${file} -o ${fileDirname}/${fileBasenameNoExt}\" } ] } Draw and viewers \u00b6 Draw.io integration \u00b6 marketplace Graphviz (gz files) \u00b6 Graphviz (dot) language support for Visual Studio Code preview file generate by ros2 tf2 treeview ROS \u00b6 ROS2 \u00b6 ROS2 nonanonno XML \u00b6 XML Language Support by Red Hat Marketplace","title":"Extensions"},{"location":"vscode/extensions/#extensions","text":"Utils Draw and viewer ROS","title":"Extensions"},{"location":"vscode/extensions/#utils","text":"","title":"Utils"},{"location":"vscode/extensions/#auto-snippets","text":"Insert a snippet when opening an empty file Marketplace","title":"Auto snippets"},{"location":"vscode/extensions/#examples","text":"Insert file template for gazebo sdf model config \"autoSnippet.snippets\": [ { \"pattern\": \"**/model.config\", \"snippet\": \"gazebo_model_config\" } ] gazebo_model_config snippet snippet \"gazebo_model_config\" : { \"prefix\" : \"gz_config\" , \"body\" : [ \"<?xml version=\\\"1.0\\\"?>\" , \"<model>\" , \" <name>${1}</name>\" , \" <version>1.0</version>\" , \" <sdf version=\\\"${2|1.5,1.6|}\\\">${3:${1}}.sdf</sdf>\" , \" <author>\" , \" <name></name>\" , \" <email></email>\" , \" </author>\" , \" <description>\" , \" </description>\" , \"</model>\" ], \"description\" : \"gazebo model config file template\" }","title":"Examples"},{"location":"vscode/extensions/#run-on-save","text":"Run commands when a file is saved in vscode. marketplace","title":"Run on Save"},{"location":"vscode/extensions/#example","text":"Run xacro util to generate urdf or sdf files from xacro run xacro \"emeraldwalk.runonsave\" : { \"commands\" : [ { \"match\" : \".sdf.xacro\" , \"cmd\" : \"export PYTHONPATH=/opt/ros/foxy/lib/python3.8/site-packages && /opt/ros/foxy/bin/xacro ${file} -o ${fileDirname}/${fileBasenameNoExt}\" } ] }","title":"Example"},{"location":"vscode/extensions/#draw-and-viewers","text":"","title":"Draw and viewers"},{"location":"vscode/extensions/#drawio-integration","text":"marketplace","title":"Draw.io integration"},{"location":"vscode/extensions/#graphviz-gz-files","text":"Graphviz (dot) language support for Visual Studio Code preview file generate by ros2 tf2 treeview","title":"Graphviz (gz files)"},{"location":"vscode/extensions/#ros","text":"","title":"ROS"},{"location":"vscode/extensions/#ros2","text":"ROS2 nonanonno","title":"ROS2"},{"location":"vscode/extensions/#xml","text":"XML Language Support by Red Hat Marketplace","title":"XML"},{"location":"vscode/schema/","text":"Config XML ext. to validate xml against schema \u00b6 Install Red Hat XML extension ... Download schema from sdformat.org root.xsd main entry point Copy files to project / global location Associate file types to <path>/root.xsd settings \"xml.fileAssociations\" : [ { \"pattern\" : \"**/*.sdf\" , \"systemId\" : \"${workspaceFolder}/vscode/sdf_schema/root.xsd\" }, { \"pattern\" : \"**/*.world\" , \"systemId\" : \"${workspaceFolder}/vscode/sdf_schema/root.xsd\" } ] Add xacro support to schema \u00b6 Add xacro schema to support xacro tags and namespace Add xacro support to root.xsd root.xsd 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 <?xml version='1.0' encoding='UTF-8'?> <xsd:schema xmlns:xsd= 'http://www.w3.org/2001/XMLSchema' xmlns:xacro= \"http://www.ros.org/wiki/xacro\" > <xsd:annotation> <xsd:documentation xml:lang= 'en' > <![CDATA[SDF base element.]]> </xsd:documentation> </xsd:annotation> <xsd:include schemaLocation= 'http://sdformat.org/schemas/types.xsd' /> <xsd:include schemaLocation= 'http://sdformat.org/schemas/world.xsd' /> <xsd:include schemaLocation= 'http://sdformat.org/schemas/model.xsd' /> <xsd:include schemaLocation= 'http://sdformat.org/schemas/actor.xsd' /> <xsd:include schemaLocation= 'http://sdformat.org/schemas/light.xsd' /> <xsd:import namespace= \"http://www.ros.org/wiki/xacro\" schemaLocation= \"xacro.xsd\" /> <xsd:element name= 'sdf' > <xsd:complexType> <xsd:choice maxOccurs= 'unbounded' > <xsd:element ref= 'xacro:include' /> <xsd:element ref= 'world' /> <xsd:element ref= 'model' /> <xsd:element ref= 'actor' /> <xsd:element ref= 'light' /> </xsd:choice> <xsd:attribute name= 'version' type= 'xsd:string' use= 'required' > <xsd:annotation> <xsd:documentation xml:lang= 'en' > <![CDATA[Version number of the SDF format.]]> </xsd:documentation> </xsd:annotation> </xsd:attribute> </xsd:complexType> </xsd:element> </xsd:schema> Resource \u00b6 sdformat.org Download schema offline","title":"using schema for sdf validation and tips"},{"location":"vscode/schema/#config-xml-ext-to-validate-xml-against-schema","text":"Install Red Hat XML extension ... Download schema from sdformat.org root.xsd main entry point Copy files to project / global location Associate file types to <path>/root.xsd settings \"xml.fileAssociations\" : [ { \"pattern\" : \"**/*.sdf\" , \"systemId\" : \"${workspaceFolder}/vscode/sdf_schema/root.xsd\" }, { \"pattern\" : \"**/*.world\" , \"systemId\" : \"${workspaceFolder}/vscode/sdf_schema/root.xsd\" } ]","title":"Config XML ext. to validate xml against schema"},{"location":"vscode/schema/#add-xacro-support-to-schema","text":"Add xacro schema to support xacro tags and namespace Add xacro support to root.xsd root.xsd 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 <?xml version='1.0' encoding='UTF-8'?> <xsd:schema xmlns:xsd= 'http://www.w3.org/2001/XMLSchema' xmlns:xacro= \"http://www.ros.org/wiki/xacro\" > <xsd:annotation> <xsd:documentation xml:lang= 'en' > <![CDATA[SDF base element.]]> </xsd:documentation> </xsd:annotation> <xsd:include schemaLocation= 'http://sdformat.org/schemas/types.xsd' /> <xsd:include schemaLocation= 'http://sdformat.org/schemas/world.xsd' /> <xsd:include schemaLocation= 'http://sdformat.org/schemas/model.xsd' /> <xsd:include schemaLocation= 'http://sdformat.org/schemas/actor.xsd' /> <xsd:include schemaLocation= 'http://sdformat.org/schemas/light.xsd' /> <xsd:import namespace= \"http://www.ros.org/wiki/xacro\" schemaLocation= \"xacro.xsd\" /> <xsd:element name= 'sdf' > <xsd:complexType> <xsd:choice maxOccurs= 'unbounded' > <xsd:element ref= 'xacro:include' /> <xsd:element ref= 'world' /> <xsd:element ref= 'model' /> <xsd:element ref= 'actor' /> <xsd:element ref= 'light' /> </xsd:choice> <xsd:attribute name= 'version' type= 'xsd:string' use= 'required' > <xsd:annotation> <xsd:documentation xml:lang= 'en' > <![CDATA[Version number of the SDF format.]]> </xsd:documentation> </xsd:annotation> </xsd:attribute> </xsd:complexType> </xsd:element> </xsd:schema>","title":"Add xacro support to schema"},{"location":"vscode/schema/#resource","text":"sdformat.org Download schema offline","title":"Resource"},{"location":"vscode/settings/","text":"\"files.associations\": { \"*.xacro\": \"xml\", \"*.world\": \"xml\", \"sdf\": \"xml\" }","title":"settings"},{"location":"vscode/snippets/","text":"Gazebo sdf ROS urdf mkdocs xacro XACRO \u00b6 xacro.code-snippet demo \"xacro property\" : { \"scope\" : \"xml, xacro, sdf.xaco,\" , \"prefix\" : \"xacro_prop\" , \"body\" : [ \"<xacro:property name=\\\"$1\\\" value=\\\"$2\\\" />\" ], \"description\" : \"Add xacro property\" }","title":"snippets"},{"location":"vscode/snippets/#xacro","text":"xacro.code-snippet demo \"xacro property\" : { \"scope\" : \"xml, xacro, sdf.xaco,\" , \"prefix\" : \"xacro_prop\" , \"body\" : [ \"<xacro:property name=\\\"$1\\\" value=\\\"$2\\\" />\" ], \"description\" : \"Add xacro property\" }","title":"XACRO"},{"location":"tags.html","text":"Contents grouped by tag \u00b6 diff \u00b6 diff drive plugin go to wall follow extensions \u00b6 Extensions fast dds \u00b6 PX4 ROS2 gazebo \u00b6 Part1 Hello SKBot snippets goto \u00b6 go to gpy ray \u00b6 laser scan hello \u00b6 hello python node read scan/laser data interface \u00b6 service interface joint_state_publisher \u00b6 diff drive plugin laser \u00b6 read scan/laser data wall follow mkdocs \u00b6 snippets one on one \u00b6 ROS2 parameter service parameter \u00b6 ROS2 parameter px4 \u00b6 PX4 ROS2 python \u00b6 hello python node ray \u00b6 laser scan ros2 \u00b6 service PX4 ROS2 scan \u00b6 read scan/laser data wall follow schema \u00b6 using schema for sdf validation and tips sdf \u00b6 using schema for sdf validation and tips snippets service \u00b6 Part5 - ROS2 Service service interface service tf \u00b6 TF vscode \u00b6 Extensions settings xacro \u00b6 Part1 Hello SKBot xml \u00b6 using schema for sdf validation and tips youtube \u00b6 courses","title":"Tags"},{"location":"tags.html#contents-grouped-by-tag","text":"","title":"Contents grouped by tag"},{"location":"tags.html#diff","text":"diff drive plugin go to wall follow","title":"diff"},{"location":"tags.html#extensions","text":"Extensions","title":"extensions"},{"location":"tags.html#fast-dds","text":"PX4 ROS2","title":"fast dds"},{"location":"tags.html#gazebo","text":"Part1 Hello SKBot snippets","title":"gazebo"},{"location":"tags.html#goto","text":"go to","title":"goto"},{"location":"tags.html#gpy-ray","text":"laser scan","title":"gpy ray"},{"location":"tags.html#hello","text":"hello python node read scan/laser data","title":"hello"},{"location":"tags.html#interface","text":"service interface","title":"interface"},{"location":"tags.html#joint_state_publisher","text":"diff drive plugin","title":"joint_state_publisher"},{"location":"tags.html#laser","text":"read scan/laser data wall follow","title":"laser"},{"location":"tags.html#mkdocs","text":"snippets","title":"mkdocs"},{"location":"tags.html#one-on-one","text":"ROS2 parameter service","title":"one on one"},{"location":"tags.html#parameter","text":"ROS2 parameter","title":"parameter"},{"location":"tags.html#px4","text":"PX4 ROS2","title":"px4"},{"location":"tags.html#python","text":"hello python node","title":"python"},{"location":"tags.html#ray","text":"laser scan","title":"ray"},{"location":"tags.html#ros2","text":"service PX4 ROS2","title":"ros2"},{"location":"tags.html#scan","text":"read scan/laser data wall follow","title":"scan"},{"location":"tags.html#schema","text":"using schema for sdf validation and tips","title":"schema"},{"location":"tags.html#sdf","text":"using schema for sdf validation and tips snippets","title":"sdf"},{"location":"tags.html#service","text":"Part5 - ROS2 Service service interface service","title":"service"},{"location":"tags.html#tf","text":"TF","title":"tf"},{"location":"tags.html#vscode","text":"Extensions settings","title":"vscode"},{"location":"tags.html#xacro","text":"Part1 Hello SKBot","title":"xacro"},{"location":"tags.html#xml","text":"using schema for sdf validation and tips","title":"xml"},{"location":"tags.html#youtube","text":"courses","title":"youtube"}]}