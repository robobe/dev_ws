{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to ROS2 my tutorials \u00b6 Gazebo \u00b6 ROS2 gazebo plugin Plugin template","title":"Welcome to ROS2 my tutorials"},{"location":"#welcome-to-ros2-my-tutorials","text":"","title":"Welcome to ROS2 my tutorials"},{"location":"#gazebo","text":"ROS2 gazebo plugin Plugin template","title":"Gazebo"},{"location":"gazebo_pkg/ros2_gazebo_plugin_101/","text":"Create first ROS2 gazebo plugin following gazebo_ros_template from gazebo_ros_pkgs github gazebo_pkg/ \u251c\u2500\u2500 CMakeLists.txt \u251c\u2500\u2500 include \u2502 \u2514\u2500\u2500 gazebo_pkg \u2502 \u2514\u2500\u2500 gazebo_ros_template.hpp \u251c\u2500\u2500 launch \u2502 \u2514\u2500\u2500 simple.launch.py \u251c\u2500\u2500 package.xml \u251c\u2500\u2500 src \u2502 \u2514\u2500\u2500 gazebo_ros_template.cpp \u2514\u2500\u2500 worlds \u2514\u2500\u2500 gazebo_ros_template_demo.world Plugin \u00b6 header file gazebo_ros_template.hpp 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 #ifndef GAZEBO_PLUGINS__GAZEBO_ROS_TEMPLATE_HPP_ #define GAZEBO_PLUGINS__GAZEBO_ROS_TEMPLATE_HPP_ #include <gazebo/common/Plugin.hh> #include <memory> namespace gazebo_plugins { // Forward declaration of private data class. class GazeboRosTemplatePrivate ; class GazeboRosTemplate : public gazebo :: ModelPlugin { public : GazeboRosTemplate (); virtual ~ GazeboRosTemplate (); void Load ( gazebo :: physics :: ModelPtr model , sdf :: ElementPtr _sdf ) override ; protected : virtual void OnUpdate (); private : std :: unique_ptr < GazeboRosTemplatePrivate > impl_ ; }; } // namespace gazebo_plugins #endif // GAZEBO_PLUGINS__GAZEBO_ROS_TEMPLATE_HPP_ plugin file gazebo_ros_template.cpp 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 #include <gazebo/physics/Model.hh> #include <gazebo_pkg/gazebo_ros_template.hpp> #include <gazebo_ros/node.hpp> #include <rclcpp/rclcpp.hpp> #include <memory> namespace gazebo_plugins { class GazeboRosTemplatePrivate { public : gazebo :: event :: ConnectionPtr update_connection_ ; /// Node for ROS communication. gazebo_ros :: Node :: SharedPtr ros_node_ ; }; GazeboRosTemplate :: GazeboRosTemplate () : impl_ ( std :: make_unique < GazeboRosTemplatePrivate > ()) { } GazeboRosTemplate ::~ GazeboRosTemplate () { } void GazeboRosTemplate :: Load ( gazebo :: physics :: ModelPtr model , sdf :: ElementPtr _sdf ) { impl_ -> ros_node_ = gazebo_ros :: Node :: Get ( _sdf ); gzdbg << \"debug\" << std :: endl ; gzmsg << \"message\" << std :: endl ; gzwarn << \"warning\" << std :: endl ; gzerr << \"error\" << std :: endl ; RCLCPP_INFO ( impl_ -> ros_node_ -> get_logger (), model -> GetName (). c_str ()); RCLCPP_INFO ( impl_ -> ros_node_ -> get_logger (), \"hello ros2\" ); RCLCPP_INFO ( impl_ -> ros_node_ -> get_logger (), \"hello from gazebo plugin\" ); RCLCPP_INFO ( impl_ -> ros_node_ -> get_logger (), \"ROS2 Info\" ); RCLCPP_WARN ( impl_ -> ros_node_ -> get_logger (), \"ROS2 Warning\" ); RCLCPP_ERROR ( impl_ -> ros_node_ -> get_logger (), \"ROS2 Error\" ); impl_ -> update_connection_ = gazebo :: event :: Events :: ConnectWorldUpdateBegin ( std :: bind ( & GazeboRosTemplate :: OnUpdate , this )); } void GazeboRosTemplate :: OnUpdate () { // Do something every simulation iteration } GZ_REGISTER_MODEL_PLUGIN ( GazeboRosTemplate ) } // namespace gazebo_plugins cmake file CMakeLists.txt 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 cmake_minimum_required ( VERSION 3.5 ) project ( gazebo_pkg ) # Default to C++14 if ( NOT CMAKE_CXX_STANDARD ) set ( CMAKE_CXX_STANDARD 14 ) endif () if ( CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES \"Clang\" ) add_compile_options ( -Wall -Wextra -Wpedantic ) endif () # find dependencies find_package ( ament_cmake REQUIRED ) find_package ( gazebo REQUIRED ) find_package ( gazebo_dev REQUIRED ) find_package ( rclcpp REQUIRED ) find_package ( gazebo_ros REQUIRED ) include_directories ( ${ GAZEBO_INCLUDE_DIRS } ) link_directories ( ${ GAZEBO_LIBRARY_DIRS } ) # gazebo_ros_template add_library ( gazebo_ros_template SHARED src/gazebo_ros_template.cpp ) target_include_directories ( gazebo_ros_template PUBLIC include ) ament_target_dependencies ( gazebo_ros_template \"gazebo_dev\" \"gazebo_ros\" \"rclcpp\" ) ament_export_libraries ( gazebo_ros_template ) # gazebo_ros_contact add_library ( gazebo_ros_contact SHARED src/gazebo_ros_contact.cpp ) target_include_directories ( gazebo_ros_contact PUBLIC include ) target_link_libraries ( gazebo_ros_contact ${ GAZEBO_LIBRARIES } ) ament_target_dependencies ( gazebo_ros_contact \"gazebo_dev\" \"gazebo_ros\" \"rclcpp\" ) ament_export_libraries ( gazebo_ros_contact ) install ( TARGETS gazebo_ros_contact ARCHIVE DESTINATION lib LIBRARY DESTINATION lib RUNTIME DESTINATION bin ) install ( TARGETS gazebo_ros_template ARCHIVE DESTINATION lib LIBRARY DESTINATION lib RUNTIME DESTINATION bin ) install ( DIRECTORY worlds DESTINATION share/ ${ PROJECT_NAME } / ) install ( DIRECTORY launch DESTINATION share/ ${ PROJECT_NAME } / ) ament_package () World file \u00b6 world file gazebo_ros_template.world <?xml version=\"1.0\"?> <sdf version= \"1.6\" > <world name= \"default\" > <model name= \"demo_model\" > <static> true </static> <plugin name= \"gazebo_ros_template\" filename= \"libgazebo_ros_template.so\" > <ros> <namespace> /demo </namespace> </ros> </plugin> </model> </world> </sdf> Launch \u00b6 launch file simple.launch.py from ament_index_python.packages import get_package_share_directory , get_package_prefix from launch import LaunchDescription , logging from launch.actions import IncludeLaunchDescription from launch.launch_description_sources import PythonLaunchDescriptionSource from launch_ros.substitutions import FindPackageShare import os log = logging . get_logger ( \"My_launch\" ) def generate_launch_description (): pkg_share = FindPackageShare ( package = \"gazebo_pkg\" ) . find ( \"gazebo_pkg\" ) gazebo_models_path = os . path . join ( pkg_share , \"models\" ) pkg = get_package_prefix ( \"gazebo_pkg\" ) gazebo_plugin_path = os . path . join ( pkg , \"lib\" ) os . environ [ \"GAZEBO_MODEL_PATH\" ] = gazebo_models_path os . environ [ \"GAZEBO_PLUGIN_PATH\" ] = gazebo_plugin_path world_file_name = \"gazebo_ros_template.world\" world_path = os . path . join ( pkg_share , \"worlds\" , world_file_name ) pkg_gazebo_ros = get_package_share_directory ( \"gazebo_ros\" ) ld = LaunchDescription () gz_action = IncludeLaunchDescription ( PythonLaunchDescriptionSource ( os . path . join ( pkg_gazebo_ros , \"launch\" , \"gazebo.launch.py\" ), ), launch_arguments = { \"world\" : world_path , \"verbose\" : \"true\" } . items (), ) ld . add_action ( gz_action ) return ld Run \u00b6 ros2 launch gazebo_pkg simple.launch.py References \u00b6 Class GazeboRosTemplate","title":"ROS2 gazebo plugin"},{"location":"gazebo_pkg/ros2_gazebo_plugin_101/#plugin","text":"header file gazebo_ros_template.hpp 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 #ifndef GAZEBO_PLUGINS__GAZEBO_ROS_TEMPLATE_HPP_ #define GAZEBO_PLUGINS__GAZEBO_ROS_TEMPLATE_HPP_ #include <gazebo/common/Plugin.hh> #include <memory> namespace gazebo_plugins { // Forward declaration of private data class. class GazeboRosTemplatePrivate ; class GazeboRosTemplate : public gazebo :: ModelPlugin { public : GazeboRosTemplate (); virtual ~ GazeboRosTemplate (); void Load ( gazebo :: physics :: ModelPtr model , sdf :: ElementPtr _sdf ) override ; protected : virtual void OnUpdate (); private : std :: unique_ptr < GazeboRosTemplatePrivate > impl_ ; }; } // namespace gazebo_plugins #endif // GAZEBO_PLUGINS__GAZEBO_ROS_TEMPLATE_HPP_ plugin file gazebo_ros_template.cpp 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 #include <gazebo/physics/Model.hh> #include <gazebo_pkg/gazebo_ros_template.hpp> #include <gazebo_ros/node.hpp> #include <rclcpp/rclcpp.hpp> #include <memory> namespace gazebo_plugins { class GazeboRosTemplatePrivate { public : gazebo :: event :: ConnectionPtr update_connection_ ; /// Node for ROS communication. gazebo_ros :: Node :: SharedPtr ros_node_ ; }; GazeboRosTemplate :: GazeboRosTemplate () : impl_ ( std :: make_unique < GazeboRosTemplatePrivate > ()) { } GazeboRosTemplate ::~ GazeboRosTemplate () { } void GazeboRosTemplate :: Load ( gazebo :: physics :: ModelPtr model , sdf :: ElementPtr _sdf ) { impl_ -> ros_node_ = gazebo_ros :: Node :: Get ( _sdf ); gzdbg << \"debug\" << std :: endl ; gzmsg << \"message\" << std :: endl ; gzwarn << \"warning\" << std :: endl ; gzerr << \"error\" << std :: endl ; RCLCPP_INFO ( impl_ -> ros_node_ -> get_logger (), model -> GetName (). c_str ()); RCLCPP_INFO ( impl_ -> ros_node_ -> get_logger (), \"hello ros2\" ); RCLCPP_INFO ( impl_ -> ros_node_ -> get_logger (), \"hello from gazebo plugin\" ); RCLCPP_INFO ( impl_ -> ros_node_ -> get_logger (), \"ROS2 Info\" ); RCLCPP_WARN ( impl_ -> ros_node_ -> get_logger (), \"ROS2 Warning\" ); RCLCPP_ERROR ( impl_ -> ros_node_ -> get_logger (), \"ROS2 Error\" ); impl_ -> update_connection_ = gazebo :: event :: Events :: ConnectWorldUpdateBegin ( std :: bind ( & GazeboRosTemplate :: OnUpdate , this )); } void GazeboRosTemplate :: OnUpdate () { // Do something every simulation iteration } GZ_REGISTER_MODEL_PLUGIN ( GazeboRosTemplate ) } // namespace gazebo_plugins cmake file CMakeLists.txt 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 cmake_minimum_required ( VERSION 3.5 ) project ( gazebo_pkg ) # Default to C++14 if ( NOT CMAKE_CXX_STANDARD ) set ( CMAKE_CXX_STANDARD 14 ) endif () if ( CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES \"Clang\" ) add_compile_options ( -Wall -Wextra -Wpedantic ) endif () # find dependencies find_package ( ament_cmake REQUIRED ) find_package ( gazebo REQUIRED ) find_package ( gazebo_dev REQUIRED ) find_package ( rclcpp REQUIRED ) find_package ( gazebo_ros REQUIRED ) include_directories ( ${ GAZEBO_INCLUDE_DIRS } ) link_directories ( ${ GAZEBO_LIBRARY_DIRS } ) # gazebo_ros_template add_library ( gazebo_ros_template SHARED src/gazebo_ros_template.cpp ) target_include_directories ( gazebo_ros_template PUBLIC include ) ament_target_dependencies ( gazebo_ros_template \"gazebo_dev\" \"gazebo_ros\" \"rclcpp\" ) ament_export_libraries ( gazebo_ros_template ) # gazebo_ros_contact add_library ( gazebo_ros_contact SHARED src/gazebo_ros_contact.cpp ) target_include_directories ( gazebo_ros_contact PUBLIC include ) target_link_libraries ( gazebo_ros_contact ${ GAZEBO_LIBRARIES } ) ament_target_dependencies ( gazebo_ros_contact \"gazebo_dev\" \"gazebo_ros\" \"rclcpp\" ) ament_export_libraries ( gazebo_ros_contact ) install ( TARGETS gazebo_ros_contact ARCHIVE DESTINATION lib LIBRARY DESTINATION lib RUNTIME DESTINATION bin ) install ( TARGETS gazebo_ros_template ARCHIVE DESTINATION lib LIBRARY DESTINATION lib RUNTIME DESTINATION bin ) install ( DIRECTORY worlds DESTINATION share/ ${ PROJECT_NAME } / ) install ( DIRECTORY launch DESTINATION share/ ${ PROJECT_NAME } / ) ament_package ()","title":"Plugin"},{"location":"gazebo_pkg/ros2_gazebo_plugin_101/#world-file","text":"world file gazebo_ros_template.world <?xml version=\"1.0\"?> <sdf version= \"1.6\" > <world name= \"default\" > <model name= \"demo_model\" > <static> true </static> <plugin name= \"gazebo_ros_template\" filename= \"libgazebo_ros_template.so\" > <ros> <namespace> /demo </namespace> </ros> </plugin> </model> </world> </sdf>","title":"World file"},{"location":"gazebo_pkg/ros2_gazebo_plugin_101/#launch","text":"launch file simple.launch.py from ament_index_python.packages import get_package_share_directory , get_package_prefix from launch import LaunchDescription , logging from launch.actions import IncludeLaunchDescription from launch.launch_description_sources import PythonLaunchDescriptionSource from launch_ros.substitutions import FindPackageShare import os log = logging . get_logger ( \"My_launch\" ) def generate_launch_description (): pkg_share = FindPackageShare ( package = \"gazebo_pkg\" ) . find ( \"gazebo_pkg\" ) gazebo_models_path = os . path . join ( pkg_share , \"models\" ) pkg = get_package_prefix ( \"gazebo_pkg\" ) gazebo_plugin_path = os . path . join ( pkg , \"lib\" ) os . environ [ \"GAZEBO_MODEL_PATH\" ] = gazebo_models_path os . environ [ \"GAZEBO_PLUGIN_PATH\" ] = gazebo_plugin_path world_file_name = \"gazebo_ros_template.world\" world_path = os . path . join ( pkg_share , \"worlds\" , world_file_name ) pkg_gazebo_ros = get_package_share_directory ( \"gazebo_ros\" ) ld = LaunchDescription () gz_action = IncludeLaunchDescription ( PythonLaunchDescriptionSource ( os . path . join ( pkg_gazebo_ros , \"launch\" , \"gazebo.launch.py\" ), ), launch_arguments = { \"world\" : world_path , \"verbose\" : \"true\" } . items (), ) ld . add_action ( gz_action ) return ld","title":"Launch"},{"location":"gazebo_pkg/ros2_gazebo_plugin_101/#run","text":"ros2 launch gazebo_pkg simple.launch.py","title":"Run"},{"location":"gazebo_pkg/ros2_gazebo_plugin_101/#references","text":"Class GazeboRosTemplate","title":"References"}]}